{
    "bozo": false,
    "entries": [
        {
            "title": "introduction-to-matery",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "introduction-to-matery"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/front/introduction-to-matery/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/front/introduction-to-matery/",
            "id": "https://kawhicurry.github.io/front/introduction-to-matery/",
            "guidislink": false,
            "published": "2021-12-19T12:02:04.000Z",
            "published_parsed": [
                2021,
                12,
                19,
                12,
                2,
                4,
                6,
                353,
                0
            ],
            "updated": "2021-12-19T12:05:36.345Z",
            "updated_parsed": [
                2021,
                12,
                19,
                12,
                5,
                36,
                6,
                353,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h2 id=\"文章-Front-matter-介绍\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#文章-Front-matter-介绍\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Front-matter-选项详解\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br />以下为文章的 <code>Front-matter</code> 示例。</li></ol></blockquote><h3 id=\"最简示例\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#最简示例\" title=\"最简示例\"></a>最简示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br /><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br /><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br /><span class=\"line\"><span class=\"meta\">---</span></span><br /></pre></td></tr></table></figure><h3 id=\"最全示例\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#最全示例\" title=\"最全示例\"></a>最全示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br /><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br /><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br /><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">赵奇</span></span><br /><span class=\"line\"><span class=\"attr\">img:</span> <span class=\"string\">/source/images/xxx.jpg</span></span><br /><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br /><span class=\"line\"><span class=\"attr\">hide:</span> <span class=\"literal\">false</span></span><br /><span class=\"line\"><span class=\"attr\">cover:</span> <span class=\"literal\">true</span></span><br /><span class=\"line\"><span class=\"attr\">coverImg:</span> <span class=\"string\">/images/1.jpg</span></span><br /><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br /><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">false</span></span><br /><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></span><br /><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br /><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">Markdown</span></span><br /><span class=\"line\"><span class=\"attr\">tags:</span></span><br /><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Typora</span></span><br /><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Markdown</span></span><br /><span class=\"line\"><span class=\"meta\">---</span></span><br /></pre></td></tr></table></figure>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h2 id=\"文章-Front-matter-介绍\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#文章-Front-matter-介绍\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"F"
                }
            ],
            "summary": "<h2 id=\"文章-Front-matter-介绍\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#文章-Front-matter-介绍\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Front-matter-选项详解\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则<br />以下为文章的 <code>Front-matter</code> 示例。</li></ol></blockquote><h3 id=\"最简示例\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#最简示例\" title=\"最简示例\"></a>最简示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br /><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br /><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br /><span class=\"line\"><span class=\"meta\">---</span></span><br /></pre></td></tr></table></figure><h3 id=\"最全示例\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#最全示例\" title=\"最全示例\"></a>最全示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br /><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br /><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br /><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">赵奇</span></span><br /><span class=\"line\"><span class=\"attr\">img:</span> <span class=\"string\">/source/images/xxx.jpg</span></span><br /><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br /><span class=\"line\"><span class=\"attr\">hide:</span> <span class=\"literal\">false</span></span><br /><span class=\"line\"><span class=\"attr\">cover:</span> <span class=\"literal\">true</span></span><br /><span class=\"line\"><span class=\"attr\">coverImg:</span> <span class=\"string\">/images/1.jpg</span></span><br /><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br /><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">false</span></span><br /><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></span><br /><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br /><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">Markdown</span></span><br /><span class=\"line\"><span class=\"attr\">tags:</span></span><br /><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Typora</span></span><br /><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Markdown</span></span><br /><span class=\"line\"><span class=\"meta\">---</span></span><br /></pre></td></tr></table></figure>",
            "tags": [
                {
                    "term": "front",
                    "scheme": "https://kawhicurry.github.io/categories/front/",
                    "label": null
                },
                {
                    "term": "hexo",
                    "scheme": "https://kawhicurry.github.io/tags/hexo/",
                    "label": null
                }
            ]
        },
        {
            "title": "可以用来阅读源码的工具",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "可以用来阅读源码的工具"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/tools/ke-yi-yong-lai-yue-du-yuan-ma-de-gong-ju/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/tools/ke-yi-yong-lai-yue-du-yuan-ma-de-gong-ju/",
            "id": "https://kawhicurry.github.io/tools/ke-yi-yong-lai-yue-du-yuan-ma-de-gong-ju/",
            "guidislink": false,
            "published": "2021-12-15T07:55:21.000Z",
            "published_parsed": [
                2021,
                12,
                15,
                7,
                55,
                21,
                2,
                349,
                0
            ],
            "updated": "2021-12-15T08:19:21.741Z",
            "updated_parsed": [
                2021,
                12,
                15,
                8,
                19,
                21,
                2,
                349,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p><h2 id=\"Source-Insight\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Source-Insight\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p><ul><li>要钱</li><li>古老的UI</li><li>看起来很复杂</li></ul><p>所以就没用它了</p><h2 id=\"Source-trail\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Source-trail\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p><p>这个软件提供了</p><ul><li>对于各种结构（文件，类）的图形化展示</li><li>对于各种component间相互作用的展示</li><li>支持图形化和源码相互对照的功能</li></ul><p>但是也有这些缺点</p><ul><li>程序流程不够清晰（可能这点本来就是给人看的）</li><li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li><li>程序必须要能完全编译才能生成图形展示。</li></ul><p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p><h2 id=\"VScode\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#VScode\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p><h3 id=\"insight\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#insight\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p><p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p><h3 id=\"codetour\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#codetour\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p><p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p>\n<h2 id=\"Source-Insight\">"
                }
            ],
            "summary": "<p>今天突然想看看nginx的源码，于是随手下了一份，发现写的挺清楚的。不过看的时候还是有不少麻烦事，比如看着看着就记不得之前看到哪了。之前看robocup2d的代码也是这个问题，这里记录了一下这几天为了看源码找的工具。</p><h2 id=\"Source-Insight\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Source-Insight\" title=\"Source Insight\"></a>Source Insight</h2><p>这个说是老牌IDE了，据说有很多好的功能，但是因为</p><ul><li>要钱</li><li>古老的UI</li><li>看起来很复杂</li></ul><p>所以就没用它了</p><h2 id=\"Source-trail\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Source-trail\" title=\"Source trail\"></a>Source trail</h2><p>就是因为它我才知道原来有专门看源码用的软件</p><p>这个软件提供了</p><ul><li>对于各种结构（文件，类）的图形化展示</li><li>对于各种component间相互作用的展示</li><li>支持图形化和源码相互对照的功能</li></ul><p>但是也有这些缺点</p><ul><li>程序流程不够清晰（可能这点本来就是给人看的）</li><li>对于宏的处理不够好，不能做到“把宏当变量”（也可能是我不会？）</li><li>程序必须要能完全编译才能生成图形展示。</li></ul><p>上面这些都是看robocup的代码时候的感想，这个工程直接使用了makefile。而软件可能对cmake、vs、qt的工程更友好一些。</p><h2 id=\"VScode\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#VScode\" title=\"VScode\"></a>VScode</h2><p>最后还是拿vscode看了起来，goto来goto去还是很爽的。不过为了能更爽的看代码，搜了下插件</p><h3 id=\"insight\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#insight\" title=\"insight\"></a>insight</h3><p>一个快捷搜索用的小插件，可以在左侧快速搜索勾选的word，但是只支持诸如google、stack overflow此类的网站（其实挺好的，但是我不是很方便。。。）</p><p>我考虑考虑学学typescript帮忙更新下这个插件哈。感觉不难（</p><h3 id=\"codetour\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#codetour\" title=\"codetour\"></a>codetour</h3><p>好东西了属于是。可以按顺序记录每次看的内容并生成一个.tour文件（本质上是json），这玩意可以很轻松的记录我看某个东西的流程，并且支持修改我看的内容。比如我看的时候走错了地方，我还能倒回去）。更进一步，这个工具可以用来记录决策树。</p><p>比起工具，还是更加注重代码本身吧，毕竟目的是“学习源码的精髓”而不是“学几个工具”。</p>",
            "tags": [
                {
                    "term": "tools",
                    "scheme": "https://kawhicurry.github.io/categories/tools/",
                    "label": null
                }
            ]
        },
        {
            "title": "修改2d球队的阵型",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "修改2d球队的阵型"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/robocup/formation-md/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/robocup/formation-md/",
            "id": "https://kawhicurry.github.io/robocup/formation-md/",
            "guidislink": false,
            "published": "2021-12-13T08:26:21.000Z",
            "published_parsed": [
                2021,
                12,
                13,
                8,
                26,
                21,
                0,
                347,
                0
            ],
            "updated": "2021-12-13T08:27:29.318Z",
            "updated_parsed": [
                2021,
                12,
                13,
                8,
                27,
                29,
                0,
                347,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>其实是很久之前写的了，现在拿过来发布一下</p><h1 id=\"Formation-after-score\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Formation-after-score\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Principle\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br />Its form is like below:</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br /><span class=\"line\"># move positions when playmode is BeforeKickOff or AfterGoal.</span><br /><span class=\"line\">1 Goalie     -49.0   0.0</span><br /><span class=\"line\">2 CenterBack -25.0  -7.0</span><br /><span class=\"line\">3 CenterBack -25.0   7.0</span><br /><span class=\"line\">4 SideBack   -25.0 -15.0</span><br /><span class=\"line\">5 SideBack   -25.0  15.0</span><br /><span class=\"line\">6 DefensiveHalf -20.0   0.0</span><br /><span class=\"line\">7 OffensiveHalf -10.0 -7.0</span><br /><span class=\"line\">8 OffensiveHalf -10.0  7.0</span><br /><span class=\"line\">9  SideForward  -5.0 -10.0</span><br /><span class=\"line\">10 SideForward -5.0  10.0</span><br /><span class=\"line\">11 CenterForward -2.0   0.0</span><br /></pre></td></tr></table></figure><p>This is a static one,a dynamic one is like this:</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /><span class=\"line\">40</span><br /><span class=\"line\">41</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">Formation DelaunayTriangulation 2</span><br /><span class=\"line\">Begin Roles</span><br /><span class=\"line\">1 Goalie 0</span><br /><span class=\"line\">2 CenterBack -1</span><br /><span class=\"line\">3 CenterBack 2</span><br /><span class=\"line\">4 SideBack -1</span><br /><span class=\"line\">5 SideBack 4</span><br /><span class=\"line\">6 DefensiveHalf 0</span><br /><span class=\"line\">7 OffensiveHalf -1</span><br /><span class=\"line\">8 OffensiveHalf 7</span><br /><span class=\"line\">9 SideForward -1</span><br /><span class=\"line\">10 SideForward 9</span><br /><span class=\"line\">11 CenterForward 0</span><br /><span class=\"line\">End Roles</span><br /><span class=\"line\">Begin Samples 2 45</span><br /><span class=\"line\">----- 0 -----</span><br /><span class=\"line\">Ball 0 0</span><br /><span class=\"line\">1 -50 0</span><br /><span class=\"line\">2 -13.63 -5.6</span><br /><span class=\"line\">3 -13.9 5.6</span><br /><span class=\"line\">4 -13.09 -16.13</span><br /><span class=\"line\">5 -13.01 14.51</span><br /><span class=\"line\">6 -11.18 -0.36</span><br /><span class=\"line\">7 -6.58 -8.2</span><br /><span class=\"line\">8 -7.57 8.29</span><br /><span class=\"line\">9 -1.26 -11.99</span><br /><span class=\"line\">10 -1.8 12.17</span><br /><span class=\"line\">11 11.72 0</span><br /><span class=\"line\">----- 1 -----</span><br /><span class=\"line\">Ball -54.44 -20.73</span><br /><span class=\"line\">1 -50 0</span><br /><span class=\"line\">2 -47.41 -10.72</span><br /><span class=\"line\">3 -45.24 -5.14</span><br /><span class=\"line\">4 -50.02 -17.21</span><br /><span class=\"line\">5 -45.6 3.88</span><br /><span class=\"line\">6 -39.73 -9.8</span><br /><span class=\"line\">7 -40.83 -15.77</span><br /><span class=\"line\">8 -31.82 3.85</span><br /><span class=\"line\">9 -40.78 -29.47</span><br /><span class=\"line\">10 -27.69 21.98</span><br /><span class=\"line\">11 -14.9 -5.27</span><br /></pre></td></tr></table></figure><p>You can figure out exact coordinate through a location picture in the user-manual.</p><p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::BEFORE_KICK_OFF_CONF = <span class=\"string\">&quot;before-kick-off.conf&quot;</span>;</span><br /><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::NORMAL_FORMATION_CONF = <span class=\"string\">&quot;normal-formation.conf&quot;</span>;</span><br /></pre></td></tr></table></figure><p>Then,a function named <code>read()</code> will check whether formation files is available:</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span></span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"title\">Strategy::read</span><span class=\"params\">( <span class=\"keyword\">const</span> std::string &amp; formation_dir )</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> s_initialized = <span class=\"literal\">false</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( s_initialized )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        std::cerr &lt;&lt; __FILE__ &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"string\">&quot;: already initialized.&quot;</span></span><br /><span class=\"line\">                  &lt;&lt; std::endl;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    std::string configpath = formation_dir;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( ! configpath.<span class=\"built_in\">empty</span>()</span><br /><span class=\"line\">         &amp;&amp; configpath[ configpath.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span> ] != <span class=\"string\">&#x27;/&#x27;</span> )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        configpath += <span class=\"string\">&#x27;/&#x27;</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"comment\">// before kick off</span></span><br /><span class=\"line\">    M_before_kick_off_formation = <span class=\"built_in\">readFormation</span>( configpath + BEFORE_KICK_OFF_CONF );</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_before_kick_off_formation )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read before_kick_off formation&quot;</span> &lt;&lt; std::endl;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\"></span><br /><span class=\"line\">    s_initialized = <span class=\"literal\">true</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br /></pre></td></tr></table></figure><p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br /><span class=\"line\"><span class=\"comment\">// opponent indirect free kick</span></span><br /><span class=\"line\"><span class=\"comment\">//</span></span><br /><span class=\"line\"><span class=\"keyword\">if</span> ( ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::BackPass_</span><br /><span class=\"line\">       &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>() )</span><br /><span class=\"line\">     || ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::IndFreeKick_</span><br /><span class=\"line\">          &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">theirSide</span>() ) )</span><br /><span class=\"line\">&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> M_indirect_freekick_opp_formation;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h2 id=\"Operation\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Operation\" title=\"Operation\"></a>Operation</h2><ol><li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br /><span class=\"line\"># ---------------------------------------------------------</span><br /><span class=\"line\"># move positions when playmode is AfterGoal.</span><br /><span class=\"line\">1 Goalie     -50.0   0.0</span><br /><span class=\"line\">2 CenterBack -45.0  0.0</span><br /><span class=\"line\">3 CenterBack -40.0   0.0</span><br /><span class=\"line\">4 SideBack   -35.0  0.0</span><br /><span class=\"line\">5 SideBack   -30.0  0.0</span><br /><span class=\"line\">6 DefensiveHalf -25.0   0.0</span><br /><span class=\"line\">7 OffensiveHalf -20.0  0.0</span><br /><span class=\"line\">8 OffensiveHalf -15.0  0.0</span><br /><span class=\"line\">9  SideForward  -10.0  0.0</span><br /><span class=\"line\">10 SideForward -5.0  0.0</span><br /><span class=\"line\">11 CenterForward -1.0   0.0</span><br /><span class=\"line\"># ---------------------------------------------------------</span><br /></pre></td></tr></table></figure></li><li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br /><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> std::string CELEBRATE_1_L_FORMATION_CONF;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br /><span class=\"line\">rcsc::Formation::Ptr M_Celebrate_1_L_formation;</span><br /></pre></td></tr></table></figure></li><li><p>add logistic judge in functions</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in read()</span></span><br /><span class=\"line\">    M_Celebrate_1_L_formation = <span class=\"built_in\">readFormation</span>( configpath + CELEBRATE_1_L_FORMATION_CONF);</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_indirect_freekick_our_formation )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read celebrate-1-L-formation&quot;</span> &lt;&lt; std::endl;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\"><span class=\"comment\">//in getFormation()</span></span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::AfterGoal_ &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>())</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">20</span>)</span><br /><span class=\"line\">        &#123;</span><br /><span class=\"line\">            <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">ourSide</span>() == LEFT)</span><br /><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_L_formation;</span><br /><span class=\"line\">            <span class=\"keyword\">else</span></span><br /><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_R_formation;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">40</span>)</span><br /><span class=\"line\">        &#123;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">    &#125;</span><br /></pre></td></tr></table></figure><p>You can change your formation at most twice according to rules.So a empty if is left.<br />Notice: use wm.time().stopped() to make sure formation get normally in time</p></li></ol>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>其实是很久之前写的了，现在拿过来发布一下</p>\n<h1 id=\"Formation-after-score\"><a href=\"#Formation-after-score\" class=\"headerlink\" title=\"Formation after score."
                }
            ],
            "summary": "<p>其实是很久之前写的了，现在拿过来发布一下</p><h1 id=\"Formation-after-score\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Formation-after-score\" title=\"Formation after score.\"></a>Formation after score.</h1><h2 id=\"Principle\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Principle\" title=\"Principle\"></a>Principle</h2><p>Formation files are saved in a separate folder with surfix .conf.<br />Its form is like below:</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br /><span class=\"line\"># move positions when playmode is BeforeKickOff or AfterGoal.</span><br /><span class=\"line\">1 Goalie     -49.0   0.0</span><br /><span class=\"line\">2 CenterBack -25.0  -7.0</span><br /><span class=\"line\">3 CenterBack -25.0   7.0</span><br /><span class=\"line\">4 SideBack   -25.0 -15.0</span><br /><span class=\"line\">5 SideBack   -25.0  15.0</span><br /><span class=\"line\">6 DefensiveHalf -20.0   0.0</span><br /><span class=\"line\">7 OffensiveHalf -10.0 -7.0</span><br /><span class=\"line\">8 OffensiveHalf -10.0  7.0</span><br /><span class=\"line\">9  SideForward  -5.0 -10.0</span><br /><span class=\"line\">10 SideForward -5.0  10.0</span><br /><span class=\"line\">11 CenterForward -2.0   0.0</span><br /></pre></td></tr></table></figure><p>This is a static one,a dynamic one is like this:</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /><span class=\"line\">40</span><br /><span class=\"line\">41</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">Formation DelaunayTriangulation 2</span><br /><span class=\"line\">Begin Roles</span><br /><span class=\"line\">1 Goalie 0</span><br /><span class=\"line\">2 CenterBack -1</span><br /><span class=\"line\">3 CenterBack 2</span><br /><span class=\"line\">4 SideBack -1</span><br /><span class=\"line\">5 SideBack 4</span><br /><span class=\"line\">6 DefensiveHalf 0</span><br /><span class=\"line\">7 OffensiveHalf -1</span><br /><span class=\"line\">8 OffensiveHalf 7</span><br /><span class=\"line\">9 SideForward -1</span><br /><span class=\"line\">10 SideForward 9</span><br /><span class=\"line\">11 CenterForward 0</span><br /><span class=\"line\">End Roles</span><br /><span class=\"line\">Begin Samples 2 45</span><br /><span class=\"line\">----- 0 -----</span><br /><span class=\"line\">Ball 0 0</span><br /><span class=\"line\">1 -50 0</span><br /><span class=\"line\">2 -13.63 -5.6</span><br /><span class=\"line\">3 -13.9 5.6</span><br /><span class=\"line\">4 -13.09 -16.13</span><br /><span class=\"line\">5 -13.01 14.51</span><br /><span class=\"line\">6 -11.18 -0.36</span><br /><span class=\"line\">7 -6.58 -8.2</span><br /><span class=\"line\">8 -7.57 8.29</span><br /><span class=\"line\">9 -1.26 -11.99</span><br /><span class=\"line\">10 -1.8 12.17</span><br /><span class=\"line\">11 11.72 0</span><br /><span class=\"line\">----- 1 -----</span><br /><span class=\"line\">Ball -54.44 -20.73</span><br /><span class=\"line\">1 -50 0</span><br /><span class=\"line\">2 -47.41 -10.72</span><br /><span class=\"line\">3 -45.24 -5.14</span><br /><span class=\"line\">4 -50.02 -17.21</span><br /><span class=\"line\">5 -45.6 3.88</span><br /><span class=\"line\">6 -39.73 -9.8</span><br /><span class=\"line\">7 -40.83 -15.77</span><br /><span class=\"line\">8 -31.82 3.85</span><br /><span class=\"line\">9 -40.78 -29.47</span><br /><span class=\"line\">10 -27.69 21.98</span><br /><span class=\"line\">11 -14.9 -5.27</span><br /></pre></td></tr></table></figure><p>You can figure out exact coordinate through a location picture in the user-manual.</p><p>In the <code>strategy.cpp</code> ,formation files was first read like this:</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::BEFORE_KICK_OFF_CONF = <span class=\"string\">&quot;before-kick-off.conf&quot;</span>;</span><br /><span class=\"line\"><span class=\"keyword\">const</span> std::string Strategy::NORMAL_FORMATION_CONF = <span class=\"string\">&quot;normal-formation.conf&quot;</span>;</span><br /></pre></td></tr></table></figure><p>Then,a function named <code>read()</code> will check whether formation files is available:</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span></span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"title\">Strategy::read</span><span class=\"params\">( <span class=\"keyword\">const</span> std::string &amp; formation_dir )</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> s_initialized = <span class=\"literal\">false</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( s_initialized )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        std::cerr &lt;&lt; __FILE__ &lt;&lt; <span class=\"string\">&#x27; &#x27;</span> &lt;&lt; __LINE__ &lt;&lt; <span class=\"string\">&quot;: already initialized.&quot;</span></span><br /><span class=\"line\">                  &lt;&lt; std::endl;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    std::string configpath = formation_dir;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( ! configpath.<span class=\"built_in\">empty</span>()</span><br /><span class=\"line\">         &amp;&amp; configpath[ configpath.<span class=\"built_in\">length</span>() - <span class=\"number\">1</span> ] != <span class=\"string\">&#x27;/&#x27;</span> )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        configpath += <span class=\"string\">&#x27;/&#x27;</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"comment\">// before kick off</span></span><br /><span class=\"line\">    M_before_kick_off_formation = <span class=\"built_in\">readFormation</span>( configpath + BEFORE_KICK_OFF_CONF );</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_before_kick_off_formation )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read before_kick_off formation&quot;</span> &lt;&lt; std::endl;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\"></span><br /><span class=\"line\">    s_initialized = <span class=\"literal\">true</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br /></pre></td></tr></table></figure><p>After that,<code>getFormation()</code> will determine which formation to apply according to the worldmode.Mainly the <code>wm.gameMode().type()</code> and <code>wm.gameMode().side()</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br /><span class=\"line\"><span class=\"comment\">// opponent indirect free kick</span></span><br /><span class=\"line\"><span class=\"comment\">//</span></span><br /><span class=\"line\"><span class=\"keyword\">if</span> ( ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::BackPass_</span><br /><span class=\"line\">       &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>() )</span><br /><span class=\"line\">     || ( wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::IndFreeKick_</span><br /><span class=\"line\">          &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">theirSide</span>() ) )</span><br /><span class=\"line\">&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> M_indirect_freekick_opp_formation;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h2 id=\"Operation\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Operation\" title=\"Operation\"></a>Operation</h2><ol><li><p>add formation file <code>celebrate-1-L.conf</code> and <code>celebrate-1-R.conf</code></p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">Formation Static</span><br /><span class=\"line\"># ---------------------------------------------------------</span><br /><span class=\"line\"># move positions when playmode is AfterGoal.</span><br /><span class=\"line\">1 Goalie     -50.0   0.0</span><br /><span class=\"line\">2 CenterBack -45.0  0.0</span><br /><span class=\"line\">3 CenterBack -40.0   0.0</span><br /><span class=\"line\">4 SideBack   -35.0  0.0</span><br /><span class=\"line\">5 SideBack   -30.0  0.0</span><br /><span class=\"line\">6 DefensiveHalf -25.0   0.0</span><br /><span class=\"line\">7 OffensiveHalf -20.0  0.0</span><br /><span class=\"line\">8 OffensiveHalf -15.0  0.0</span><br /><span class=\"line\">9  SideForward  -10.0  0.0</span><br /><span class=\"line\">10 SideForward -5.0  0.0</span><br /><span class=\"line\">11 CenterForward -1.0   0.0</span><br /><span class=\"line\"># ---------------------------------------------------------</span><br /></pre></td></tr></table></figure></li><li><p>add formation object in <code>strategy.cpp</code> and <code>strategy.h</code></p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br /><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> std::string CELEBRATE_1_L_FORMATION_CONF;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//celebrate formation</span></span><br /><span class=\"line\">rcsc::Formation::Ptr M_Celebrate_1_L_formation;</span><br /></pre></td></tr></table></figure></li><li><p>add logistic judge in functions</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//in read()</span></span><br /><span class=\"line\">    M_Celebrate_1_L_formation = <span class=\"built_in\">readFormation</span>( configpath + CELEBRATE_1_L_FORMATION_CONF);</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> ( ! M_indirect_freekick_our_formation )</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        std::cerr &lt;&lt; <span class=\"string\">&quot;Failed to read celebrate-1-L-formation&quot;</span> &lt;&lt; std::endl;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\"><span class=\"comment\">//in getFormation()</span></span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">type</span>() == GameMode::AfterGoal_ &amp;&amp; wm.<span class=\"built_in\">gameMode</span>().<span class=\"built_in\">side</span>() == wm.<span class=\"built_in\">ourSide</span>())</span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">20</span>)</span><br /><span class=\"line\">        &#123;</span><br /><span class=\"line\">            <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">ourSide</span>() == LEFT)</span><br /><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_L_formation;</span><br /><span class=\"line\">            <span class=\"keyword\">else</span></span><br /><span class=\"line\">                <span class=\"keyword\">return</span> M_Celebrate_1_R_formation;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        <span class=\"keyword\">if</span> (wm.<span class=\"built_in\">time</span>().<span class=\"built_in\">stopped</span>() &lt;= <span class=\"number\">40</span>)</span><br /><span class=\"line\">        &#123;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">    &#125;</span><br /></pre></td></tr></table></figure><p>You can change your formation at most twice according to rules.So a empty if is left.<br />Notice: use wm.time().stopped() to make sure formation get normally in time</p></li></ol>",
            "tags": [
                {
                    "term": "robocup",
                    "scheme": "https://kawhicurry.github.io/categories/robocup/",
                    "label": null
                },
                {
                    "term": "apollo",
                    "scheme": "https://kawhicurry.github.io/tags/apollo/",
                    "label": null
                }
            ]
        },
        {
            "title": "log-a-rsync-mistake",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "log-a-rsync-mistake"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/linux/log-a-rsync-mistake/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/linux/log-a-rsync-mistake/",
            "id": "https://kawhicurry.github.io/linux/log-a-rsync-mistake/",
            "guidislink": false,
            "published": "2021-12-03T08:16:26.000Z",
            "published_parsed": [
                2021,
                12,
                3,
                8,
                16,
                26,
                4,
                337,
                0
            ],
            "updated": "2021-12-03T08:25:01.651Z",
            "updated_parsed": [
                2021,
                12,
                3,
                8,
                25,
                1,
                4,
                337,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"log-a-rsync-mistake\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#log-a-rsync-mistake\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">nohup rsync &lt;src&gt;/mirror1 ./tmp -a --delete &amp;</span><br /><span class=\"line\">nohup rsync &lt;src&gt;/mirror2 ./tmp -a --delete &amp;</span><br /></pre></td></tr></table></figure><p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p><p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"log-a-rsync-mistake\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#log-a-rsync-mistake\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I"
                }
            ],
            "summary": "<h1 id=\"log-a-rsync-mistake\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#log-a-rsync-mistake\" title=\"log a rsync mistake\"></a>log a rsync mistake</h1><p>I want to sync some files from 2 directories <code>mirror1</code> and<code>mirror2</code>.So I run:</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">nohup rsync &lt;src&gt;/mirror1 ./tmp -a --delete &amp;</span><br /><span class=\"line\">nohup rsync &lt;src&gt;/mirror2 ./tmp -a --delete &amp;</span><br /></pre></td></tr></table></figure><p>the argument <code>--delete</code> would delete all the file not exist in source directories. So only second command make effect.</p><p>Avoid abusing of <code>--delete</code> when using <code>rsync</code>. </p>",
            "tags": [
                {
                    "term": "linux",
                    "scheme": "https://kawhicurry.github.io/categories/linux/",
                    "label": null
                },
                {
                    "term": "rsync",
                    "scheme": "https://kawhicurry.github.io/tags/rsync/",
                    "label": null
                }
            ]
        },
        {
            "title": "0xCalculator 16进制计算器",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "0xCalculator 16进制计算器"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/cpp/0xcalculator/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/cpp/0xcalculator/",
            "id": "https://kawhicurry.github.io/cpp/0xcalculator/",
            "guidislink": false,
            "published": "2021-11-28T09:31:31.000Z",
            "published_parsed": [
                2021,
                11,
                28,
                9,
                31,
                31,
                6,
                332,
                0
            ],
            "updated": "2021-12-03T08:14:12.206Z",
            "updated_parsed": [
                2021,
                12,
                3,
                8,
                14,
                12,
                4,
                337,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"功能\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#功能\" title=\"功能\"></a>功能</h1><ol><li>对十六进制数进行双目、表达式运算</li><li>对运算结果进行保存和再读取，支持自动保存和手动保存</li><li>自定义运算结果储存位置</li><li>自定义字体大小</li><li>可更换窗口风格（换肤）</li><li>自动保存设置</li></ol><h1 id=\"任务分配\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#任务分配\" title=\"任务分配\"></a>任务分配</h1><ol><li>：ui设计与qt框架</li><li>：核心算法</li><li>：文件读写</li></ol><h1 id=\"开源地址\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#开源地址\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p><h1 id=\"开发过程\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#开发过程\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Qt框架\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p><blockquote><p>.pro：记录文件</p><p>/Headers：略</p><p>/Sources：略</p><p>/Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p><p>/Resources：存放qt标准资源（可以qt方式引用的资源）</p><p>/Other files</p></blockquote><h2 id=\"UI设计\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#UI设计\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p><p><em>问题</em>：组件散乱</p><ul><li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li></ul><blockquote><p>布局类型：</p><p>垂直：略</p><p>水平：略</p><p>栅格（grid）：上面俩合起来</p><p>窗口：？存疑，不是很能理解这是啥</p></blockquote><p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p><ul><li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li></ul><p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p><blockquote><p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p><p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p><p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p><p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p></blockquote><p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p><blockquote><p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p></blockquote><p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p><p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p><h2 id=\"模拟按键\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#模拟按键\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p><ul><li>输入按键：0123456789ABCDEF+-*/（）</li><li>功能按键：&lt;- -&gt; DEL CE UP DOWN =</li></ul><p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p><p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p><p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.h</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">insertPlainText</span>(<span class=\"string\">&quot;(&quot;</span>);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindwo.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clicked_func(name) void on_pushButton_##name##_clicked();</span></span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">0</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">1</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">2</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">3</span>);</span><br /><span class=\"line\"><span class=\"comment\">//...</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> triggered_func(name) void on_action##name##_triggered();</span></span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Author);</span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Save) <span class=\"built_in\">triggered_func</span>(Read);</span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(History_location);</span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Auto_Save);</span><br /></pre></td></tr></table></figure><p>对于实现，部分直接输入的槽函数也可以用宏生成</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_insert_func(name)                         \\</span></span><br /><span class=\"line\"><span class=\"meta\">  void MainWindow::on_pushButton_##name##_clicked() &#123; \\</span></span><br /><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;setFocus();                \\</span></span><br /><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;insertPlainText(#name);    \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">0</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">1</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">2</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">3</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">4</span>);</span><br /></pre></td></tr></table></figure><p>剩下的就只能自己写咯。</p><h2 id=\"输入输出框\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#输入输出框\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p><p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p><p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p><ul><li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li></ul><p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p><h2 id=\"等号\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#等号\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_equal_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\"></span><br /><span class=\"line\">  Location::isRead = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  QString s = ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">toPlainText</span>();</span><br /><span class=\"line\">  QString rst = <span class=\"built_in\">parser</span>(s);</span><br /><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setPlainText</span>(rst);</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (Location::autoSave) &#123;</span><br /><span class=\"line\">    <span class=\"built_in\">save</span>(Location::filePath, s, rst);</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p><h2 id=\"数据处理\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#数据处理\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p><p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p><p>记录几个当时测试出来的bug：</p><ol><li>只写一个数后按等号，直接返回0</li><li>没有考虑负数</li><li>没有考虑溢出</li></ol><p>附上代码</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /><span class=\"line\">40</span><br /><span class=\"line\">41</span><br /><span class=\"line\">42</span><br /><span class=\"line\">43</span><br /><span class=\"line\">44</span><br /><span class=\"line\">45</span><br /><span class=\"line\">46</span><br /><span class=\"line\">47</span><br /><span class=\"line\">48</span><br /><span class=\"line\">49</span><br /><span class=\"line\">50</span><br /><span class=\"line\">51</span><br /><span class=\"line\">52</span><br /><span class=\"line\">53</span><br /><span class=\"line\">54</span><br /><span class=\"line\">55</span><br /><span class=\"line\">56</span><br /><span class=\"line\">57</span><br /><span class=\"line\">58</span><br /><span class=\"line\">59</span><br /><span class=\"line\">60</span><br /><span class=\"line\">61</span><br /><span class=\"line\">62</span><br /><span class=\"line\">63</span><br /><span class=\"line\">64</span><br /><span class=\"line\">65</span><br /><span class=\"line\">66</span><br /><span class=\"line\">67</span><br /><span class=\"line\">68</span><br /><span class=\"line\">69</span><br /><span class=\"line\">70</span><br /><span class=\"line\">71</span><br /><span class=\"line\">72</span><br /><span class=\"line\">73</span><br /><span class=\"line\">74</span><br /><span class=\"line\">75</span><br /><span class=\"line\">76</span><br /><span class=\"line\">77</span><br /><span class=\"line\">78</span><br /><span class=\"line\">79</span><br /><span class=\"line\">80</span><br /><span class=\"line\">81</span><br /><span class=\"line\">82</span><br /><span class=\"line\">83</span><br /><span class=\"line\">84</span><br /><span class=\"line\">85</span><br /><span class=\"line\">86</span><br /><span class=\"line\">87</span><br /><span class=\"line\">88</span><br /><span class=\"line\">89</span><br /><span class=\"line\">90</span><br /><span class=\"line\">91</span><br /><span class=\"line\">92</span><br /><span class=\"line\">93</span><br /><span class=\"line\">94</span><br /><span class=\"line\">95</span><br /><span class=\"line\">96</span><br /><span class=\"line\">97</span><br /><span class=\"line\">98</span><br /><span class=\"line\">99</span><br /><span class=\"line\">100</span><br /><span class=\"line\">101</span><br /><span class=\"line\">102</span><br /><span class=\"line\">103</span><br /><span class=\"line\">104</span><br /><span class=\"line\">105</span><br /><span class=\"line\">106</span><br /><span class=\"line\">107</span><br /><span class=\"line\">108</span><br /><span class=\"line\">109</span><br /><span class=\"line\">110</span><br /><span class=\"line\">111</span><br /><span class=\"line\">112</span><br /><span class=\"line\">113</span><br /><span class=\"line\">114</span><br /><span class=\"line\">115</span><br /><span class=\"line\">116</span><br /><span class=\"line\">117</span><br /><span class=\"line\">118</span><br /><span class=\"line\">119</span><br /><span class=\"line\">120</span><br /><span class=\"line\">121</span><br /><span class=\"line\">122</span><br /><span class=\"line\">123</span><br /><span class=\"line\">124</span><br /><span class=\"line\">125</span><br /><span class=\"line\">126</span><br /><span class=\"line\">127</span><br /><span class=\"line\">128</span><br /><span class=\"line\">129</span><br /><span class=\"line\">130</span><br /><span class=\"line\">131</span><br /><span class=\"line\">132</span><br /><span class=\"line\">133</span><br /><span class=\"line\">134</span><br /><span class=\"line\">135</span><br /><span class=\"line\">136</span><br /><span class=\"line\">137</span><br /><span class=\"line\">138</span><br /><span class=\"line\">139</span><br /><span class=\"line\">140</span><br /><span class=\"line\">141</span><br /><span class=\"line\">142</span><br /><span class=\"line\">143</span><br /><span class=\"line\">144</span><br /><span class=\"line\">145</span><br /><span class=\"line\">146</span><br /><span class=\"line\">147</span><br /><span class=\"line\">148</span><br /><span class=\"line\">149</span><br /><span class=\"line\">150</span><br /><span class=\"line\">151</span><br /><span class=\"line\">152</span><br /><span class=\"line\">153</span><br /><span class=\"line\">154</span><br /><span class=\"line\">155</span><br /><span class=\"line\">156</span><br /><span class=\"line\">157</span><br /><span class=\"line\">158</span><br /><span class=\"line\">159</span><br /><span class=\"line\">160</span><br /><span class=\"line\">161</span><br /><span class=\"line\">162</span><br /><span class=\"line\">163</span><br /><span class=\"line\">164</span><br /><span class=\"line\">165</span><br /><span class=\"line\">166</span><br /><span class=\"line\">167</span><br /><span class=\"line\">168</span><br /><span class=\"line\">169</span><br /><span class=\"line\">170</span><br /><span class=\"line\">171</span><br /><span class=\"line\">172</span><br /><span class=\"line\">173</span><br /><span class=\"line\">174</span><br /><span class=\"line\">175</span><br /><span class=\"line\">176</span><br /><span class=\"line\">177</span><br /><span class=\"line\">178</span><br /><span class=\"line\">179</span><br /><span class=\"line\">180</span><br /><span class=\"line\">181</span><br /><span class=\"line\">182</span><br /><span class=\"line\">183</span><br /><span class=\"line\">184</span><br /><span class=\"line\">185</span><br /><span class=\"line\">186</span><br /><span class=\"line\">187</span><br /><span class=\"line\">188</span><br /><span class=\"line\">189</span><br /><span class=\"line\">190</span><br /><span class=\"line\">191</span><br /><span class=\"line\">192</span><br /><span class=\"line\">193</span><br /><span class=\"line\">194</span><br /><span class=\"line\">195</span><br /><span class=\"line\">196</span><br /><span class=\"line\">197</span><br /><span class=\"line\">198</span><br /><span class=\"line\">199</span><br /><span class=\"line\">200</span><br /><span class=\"line\">201</span><br /><span class=\"line\">202</span><br /><span class=\"line\">203</span><br /><span class=\"line\">204</span><br /><span class=\"line\">205</span><br /><span class=\"line\">206</span><br /><span class=\"line\">207</span><br /><span class=\"line\">208</span><br /><span class=\"line\">209</span><br /><span class=\"line\">210</span><br /><span class=\"line\">211</span><br /><span class=\"line\">212</span><br /><span class=\"line\">213</span><br /><span class=\"line\">214</span><br /><span class=\"line\">215</span><br /><span class=\"line\">216</span><br /><span class=\"line\">217</span><br /><span class=\"line\">218</span><br /><span class=\"line\">219</span><br /><span class=\"line\">220</span><br /><span class=\"line\">221</span><br /><span class=\"line\">222</span><br /><span class=\"line\">223</span><br /><span class=\"line\">224</span><br /><span class=\"line\">225</span><br /><span class=\"line\">226</span><br /><span class=\"line\">227</span><br /><span class=\"line\">228</span><br /><span class=\"line\">229</span><br /><span class=\"line\">230</span><br /><span class=\"line\">231</span><br /><span class=\"line\">232</span><br /><span class=\"line\">233</span><br /><span class=\"line\">234</span><br /><span class=\"line\">235</span><br /><span class=\"line\">236</span><br /><span class=\"line\">237</span><br /><span class=\"line\">238</span><br /><span class=\"line\">239</span><br /><span class=\"line\">240</span><br /><span class=\"line\">241</span><br /><span class=\"line\">242</span><br /><span class=\"line\">243</span><br /><span class=\"line\">244</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parser.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;parser.h&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pri</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">// priority</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;)&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">255</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">//乱码</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>) || i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span> ||</span><br /><span class=\"line\">      i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span> || i == <span class=\"string\">&#x27;(&#x27;</span> || i == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\">QString <span class=\"title\">parser</span><span class=\"params\">(QString expression)</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1007</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> R = LONG_MAX;</span><br /><span class=\"line\">  <span class=\"keyword\">char</span> s[N], stack1[N];</span><br /><span class=\"line\">  <span class=\"keyword\">long</span> read[N], sta[N], stack2[N], stt[N];</span><br /><span class=\"line\">  <span class=\"keyword\">bool</span> f[N] = &#123;<span class=\"number\">0</span>&#125;, flag[N] = &#123;<span class=\"number\">0</span>&#125;, ff = <span class=\"number\">0</span>, fff = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  string c, sc;</span><br /><span class=\"line\">  string str, as = expression.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">  str = <span class=\"string\">&quot;0+&quot;</span> + as;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> l = str.<span class=\"built_in\">length</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br /><span class=\"line\">    s[i] = str[i];</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(s[i])) &#123;</span><br /><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span> &amp;&amp; (s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> || s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>)) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span> &amp;&amp; (s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;+&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;-&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> ||</span><br /><span class=\"line\">                        s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>))</span><br /><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]) &amp;&amp; s[l - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;)&#x27;</span>) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> st = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++)  <span class=\"comment\">//括号是否匹配</span></span><br /><span class=\"line\">  &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span>) st++;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span>) st--;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (st != <span class=\"number\">0</span>) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>, m = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">while</span> (j &lt; l &amp;&amp; ff == <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//数字</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (s[j] &lt;= <span class=\"number\">57</span> &amp;&amp; s[j] &gt;= <span class=\"number\">48</span>) &#123;</span><br /><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">48</span>;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">        k++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[j] &gt;= <span class=\"number\">65</span> &amp;&amp; s[j] &lt;= <span class=\"number\">70</span>) &#123;</span><br /><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">55</span>;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">        k++;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//符号</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j - <span class=\"number\">1</span>]) &amp;&amp; j &gt; <span class=\"number\">0</span>)  <span class=\"comment\">//前面的数字</span></span><br /><span class=\"line\">      &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br /><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br /><span class=\"line\">          cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br /><span class=\"line\">          k--;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        read[m] = cnt;</span><br /><span class=\"line\">        m++;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">        read[m] = c;</span><br /><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">        m++;</span><br /><span class=\"line\"></span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//前面的符号</span></span><br /><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br /><span class=\"line\">        read[m] = c;</span><br /><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">        m++;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]))  <span class=\"comment\">//数字</span></span><br /><span class=\"line\">  &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (k &gt; <span class=\"number\">9</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br /><span class=\"line\">      cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (cnt &gt; R) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br /><span class=\"line\">      k--;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    read[m] = cnt;</span><br /><span class=\"line\">    m++;</span><br /><span class=\"line\">    j++;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br /><span class=\"line\">          <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) == <span class=\"number\">2</span>) &#123;</span><br /><span class=\"line\">        ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br /><span class=\"line\">               <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span>) &#123;</span><br /><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;  <span class=\"comment\">//反缀表达式</span></span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">      stack2[a] = read[i];</span><br /><span class=\"line\">      a++;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br /><span class=\"line\">        stack1[b] = <span class=\"string\">&#x27;(&#x27;</span>;</span><br /><span class=\"line\">        b++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">1</span>)  <span class=\"comment\">//+-</span></span><br /><span class=\"line\">      &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          b--;</span><br /><span class=\"line\">          a++;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        stack1[b] = read[i];</span><br /><span class=\"line\">        b++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">2</span>)  <span class=\"comment\">//*/</span></span><br /><span class=\"line\">      &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) == <span class=\"number\">2</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          b--;</span><br /><span class=\"line\">          a++;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        stack1[b] = read[i];</span><br /><span class=\"line\">        b++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">while</span> (stack1[b - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br /><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          b--;</span><br /><span class=\"line\">          a++;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        b--;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">    stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">    flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    a++;</span><br /><span class=\"line\">    b--;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"comment\">// calculation</span></span><br /><span class=\"line\">  <span class=\"keyword\">int</span> g = <span class=\"number\">0</span>, cn = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a; i++) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (!flag[i])  <span class=\"comment\">//数字</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      stt[g] = stack2[i];</span><br /><span class=\"line\">      g++;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag[i])  <span class=\"comment\">//符号</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (stack2[i]) &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br /><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] + stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br /><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] - stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br /><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] * stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R || cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] != <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">            cn = stt[g - <span class=\"number\">2</span>] / stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">            ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">          &#125;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">      g -= <span class=\"number\">2</span>;</span><br /><span class=\"line\">      stt[g] = cn;</span><br /><span class=\"line\">      g++;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> cnn = cn;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (cn == <span class=\"number\">0</span> &amp;&amp; !ff) &#123;</span><br /><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;str&lt;&lt;&quot;=&quot;&lt;&lt;cn&lt;&lt;endl;</span></span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br /><span class=\"line\">    fff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">while</span> (cn != <span class=\"number\">0</span> &amp;&amp; !ff)  <span class=\"comment\">//转十六进制</span></span><br /><span class=\"line\">  &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (cn &gt;= <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>)</span><br /><span class=\"line\">        c = x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">else</span></span><br /><span class=\"line\">        c = x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br /><span class=\"line\">      sc = c + sc;</span><br /><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cn &lt;= <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">-10</span>)</span><br /><span class=\"line\">        c = -x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">else</span></span><br /><span class=\"line\">        c = -x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br /><span class=\"line\">      sc = c + sc;</span><br /><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (cnn &lt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">    sc = <span class=\"string\">&#x27;-&#x27;</span> + sc;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!ff &amp;&amp; !fff) &#123;</span><br /><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;as&lt;&lt;&quot;=&quot;;</span></span><br /><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span></span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (sc == <span class=\"string\">&quot;-80000000&quot;</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(sc);</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Formula Error&quot;</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /></pre></td></tr></table></figure><p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p><h2 id=\"历史记录\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#历史记录\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p><p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p><p>顶层实现的用户接口功能：</p><ul><li>手动保存当前结果</li><li>选择是否自动保存结果</li><li>选择保存位置</li><li>读取历史记录</li></ul><p>底层实现的文本的读写功能</p><ul><li>获取时间</li><li>记录结果</li><li>写入和读取</li></ul><h3 id=\"底层设计细节\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#底层设计细节\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p><p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//saving.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> string <span class=\"title\">getCurrentTime</span><span class=\"params\">()</span>  <span class=\"comment\">//输出当前时间</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">time_t</span> t = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>);</span><br /><span class=\"line\">  <span class=\"keyword\">char</span> ch[<span class=\"number\">64</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br /><span class=\"line\">  <span class=\"built_in\">strftime</span>(ch, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(ch) - <span class=\"number\">1</span>, <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, <span class=\"built_in\">localtime</span>(&amp;t));</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> ch;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">save</span><span class=\"params\">(QString location, QString fomula, QString data)</span> </span>&#123;</span><br /><span class=\"line\">  string addr = location.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">  fstream f;</span><br /><span class=\"line\">  f.<span class=\"built_in\">open</span>(addr, ios::out | ios::app);</span><br /><span class=\"line\">  f &lt;&lt; <span class=\"built_in\">getCurrentTime</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; fomula.<span class=\"built_in\">toStdString</span>() &lt;&lt; <span class=\"string\">&quot;=&quot;</span></span><br /><span class=\"line\">    &lt;&lt; data.<span class=\"built_in\">toStdString</span>()</span><br /><span class=\"line\">    &lt;&lt; endl;  <span class=\"comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span></span><br /><span class=\"line\">  f.<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CountLines</span><span class=\"params\">(QString filename)</span> </span>&#123;</span><br /><span class=\"line\">  ifstream f;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  string tmp;</span><br /><span class=\"line\">  string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">  <span class=\"comment\">// ios::in 表示以只读的方式读取文件</span></span><br /><span class=\"line\">  f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br /><span class=\"line\">  <span class=\"comment\">//文件打开失败:返回0</span></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (f.<span class=\"built_in\">fail</span>()) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    <span class=\"comment\">//文件存在</span></span><br /><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(f, tmp, <span class=\"string\">&#x27;\\n&#x27;</span>)) &#123;</span><br /><span class=\"line\">      n++;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    f.<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\">QString <span class=\"title\">ReadLine</span><span class=\"params\">(QString filename, <span class=\"keyword\">int</span> line)</span>  <span class=\"comment\">//读取指定行文件</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"comment\">// line行数限制 1 - lines</span></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (line &gt; <span class=\"number\">0</span> &amp;&amp; line &lt;= <span class=\"built_in\">CountLines</span>(filename)) &#123;</span><br /><span class=\"line\">    ifstream f;</span><br /><span class=\"line\">    string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">    f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    vector&lt;string&gt; strVec;</span><br /><span class=\"line\">    <span class=\"comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span></span><br /><span class=\"line\">    <span class=\"keyword\">while</span> (!f.<span class=\"built_in\">eof</span>()) &#123;</span><br /><span class=\"line\">      string inbuf;</span><br /><span class=\"line\">      <span class=\"built_in\">getline</span>(f, inbuf, <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br /><span class=\"line\">      strVec.<span class=\"built_in\">push_back</span>(inbuf);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(strVec[line - <span class=\"number\">1</span>]);</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p><p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p><p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"comment\">//等号的槽函数在上面</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Up_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br /><span class=\"line\">    --Location::line;</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    Location::line = <span class=\"built_in\">CountLines</span>(Location::filePath);</span><br /><span class=\"line\">    Location::isRead = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Down_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br /><span class=\"line\">    ++Location::line;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p><h3 id=\"顶层设计细节\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#顶层设计细节\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionHistory_location_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  Location *new_win = <span class=\"keyword\">new</span> <span class=\"built_in\">Location</span>();</span><br /><span class=\"line\">  new_win-&gt;<span class=\"built_in\">show</span>();</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p><p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p><blockquote><p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p><p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p><p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p><p>取消：直接关闭，不做任何修改。</p></blockquote><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_path_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  QString file_name =</span><br /><span class=\"line\">      QFileDialog::<span class=\"built_in\">getOpenFileName</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择txt文件&quot;</span>, <span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;*.txt&quot;</span>);</span><br /><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(file_name);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_dir_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  QString dir_name = QFileDialog::<span class=\"built_in\">getExistingDirectory</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择文件夹&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br /><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(dir_name + <span class=\"string\">&quot;/result.txt&quot;</span>);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_cancel_clicked</span><span class=\"params\">()</span> </span>&#123; Location::<span class=\"built_in\">close</span>(); &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_sure_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  QString new_path = ui-&gt;textEdit-&gt;<span class=\"built_in\">toPlainText</span>();</span><br /><span class=\"line\">  <span class=\"function\">QFileInfo <span class=\"title\">info</span><span class=\"params\">(new_path)</span></span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!info.<span class=\"built_in\">exists</span>()) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (new_path.<span class=\"built_in\">contains</span>(<span class=\"string\">&quot;.txt&quot;</span>)) &#123;</span><br /><span class=\"line\">      <span class=\"function\">QFile <span class=\"title\">f</span><span class=\"params\">(new_path)</span></span>;</span><br /><span class=\"line\">      f.<span class=\"built_in\">open</span>(QIODevice::WriteOnly);</span><br /><span class=\"line\">      f.<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">      ui-&gt;prompt-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;路径或格式不合法，请重新输入&quot;</span>);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  Location::filePath=new_path;</span><br /><span class=\"line\">  Location::<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p><p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.h</span></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Location</span> :</span> <span class=\"keyword\">public</span> QDialog &#123;</span><br /><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> QString filePath;</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> line;</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> isRead;</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> autoSave;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br /><span class=\"line\">QString Location::filePath = <span class=\"string\">&quot;result.txt&quot;</span>;</span><br /><span class=\"line\"><span class=\"keyword\">int</span> Location::line = <span class=\"number\">0</span>;</span><br /><span class=\"line\"><span class=\"keyword\">bool</span> Location::isRead = <span class=\"number\">0</span>;</span><br /><span class=\"line\"><span class=\"keyword\">bool</span> Location::autoSave = <span class=\"number\">1</span>;</span><br /></pre></td></tr></table></figure><p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p><h2 id=\"样式设定\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#样式设定\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p><p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p><p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p><p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionBlack_theme_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  globalQss = <span class=\"string\">&quot;:/Black.qss&quot;</span>;</span><br /><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">defaultQss</span><span class=\"params\">(globalQss)</span></span>;</span><br /><span class=\"line\">  defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br /><span class=\"line\">  QString qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br /><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p><p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::changeStyle</span><span class=\"params\">(QString newStyle, QWidget *widget)</span> </span>&#123;</span><br /><span class=\"line\">  QString oldStyle = widget-&gt;<span class=\"built_in\">styleSheet</span>();</span><br /><span class=\"line\">  oldStyle += newStyle;</span><br /><span class=\"line\">  widget-&gt;<span class=\"built_in\">setStyleSheet</span>(oldStyle);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>所以这里我只写了改变字体的函数。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionLarge_font_size_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"built_in\">changeStyle</span>(<span class=\"string\">&quot;*&#123;font:30px;&#125;&quot;</span>, MainWindow::<span class=\"built_in\">centralWidget</span>());</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h2 id=\"保存设置\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#保存设置\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p><p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /><span class=\"line\">40</span><br /><span class=\"line\">41</span><br /><span class=\"line\">42</span><br /><span class=\"line\">43</span><br /><span class=\"line\">44</span><br /><span class=\"line\">45</span><br /><span class=\"line\">46</span><br /><span class=\"line\">47</span><br /><span class=\"line\">48</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::<span class=\"built_in\">MainWindow</span>(QWidget *parent)</span><br /><span class=\"line\">    : <span class=\"built_in\">QMainWindow</span>(parent), <span class=\"built_in\">ui</span>(<span class=\"keyword\">new</span> Ui::MainWindow) &#123;</span><br /><span class=\"line\">  ui-&gt;<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">grabKeyboard</span>();</span><br /><span class=\"line\"></span><br /><span class=\"line\">  QSettings *iniRead = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br /><span class=\"line\">  QString iniAuto = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;autoSave&quot;</span>).<span class=\"built_in\">toString</span>();</span><br /><span class=\"line\">  QString iniPath = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;filePath&quot;</span>).<span class=\"built_in\">toString</span>();</span><br /><span class=\"line\">  QString iniQss = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;globalQss&quot;</span>).<span class=\"built_in\">toString</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">delete</span> iniRead;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"comment\">// init autoSave</span></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!iniAuto.<span class=\"built_in\">isEmpty</span>() &amp;&amp; !iniAuto.<span class=\"built_in\">toInt</span>()) &#123;</span><br /><span class=\"line\">    Location::autoSave = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    ui-&gt;actionAuto_Save-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;Auto Save Off&quot;</span>);</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"comment\">// init filePath</span></span><br /><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniPathFile</span><span class=\"params\">(iniPath)</span></span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (iniPathFile.<span class=\"built_in\">open</span>(QFile::WriteOnly)) &#123;</span><br /><span class=\"line\">    Location::filePath = iniPath;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"comment\">// init Qss file(theme)</span></span><br /><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniQssFile</span><span class=\"params\">(iniQss)</span></span>;</span><br /><span class=\"line\">  QString qssContent;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (iniQssFile.<span class=\"built_in\">open</span>(QFile::ReadOnly)) &#123;</span><br /><span class=\"line\">    qssContent = iniQssFile.<span class=\"built_in\">readAll</span>();</span><br /><span class=\"line\">    globalQss = iniQss;</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    QFile <span class=\"built_in\">defaultQss</span>(<span class=\"string\">&quot;:/Black.qss&quot;</span>);</span><br /><span class=\"line\">    defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br /><span class=\"line\">    qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">MainWindow::~<span class=\"built_in\">MainWindow</span>() &#123;</span><br /><span class=\"line\">  QSettings *IniWrite = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br /><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;autoSave&quot;</span>, Location::autoSave);</span><br /><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;filePath&quot;</span>, Location::filePath);</span><br /><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;globalQss&quot;</span>, globalQss);</span><br /><span class=\"line\">  <span class=\"keyword\">delete</span> IniWrite;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"keyword\">delete</span> ui;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /></pre></td></tr></table></figure><h2 id=\"其他\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#其他\" title=\"其他\"></a>其他</h2><ul><li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li><li>在主函数中为窗口设定名称。</li><li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li></ul><h1 id=\"感想\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#感想\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#收获\" title=\"收获\"></a>收获</h2><ul><li>不再害怕qt框架了，反而觉得它好用。</li><li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li><li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li><li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li><li>qss基本等于css</li><li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li><li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li><li>宏的自动扩展确实好用</li><li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li></ul><h2 id=\"遗憾\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#遗憾\" title=\"遗憾\"></a>遗憾</h2><ul><li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li></ul>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"功能\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#功能\" title=\"功能\"></a>功能</h1><ol>\n<li>对十六进制数进行双目、表达式运算</li>\n<li>对运算结果进行保存和再读取，支持自动保存和手动保存</li>\n<li>自定义"
                }
            ],
            "summary": "<h1 id=\"功能\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#功能\" title=\"功能\"></a>功能</h1><ol><li>对十六进制数进行双目、表达式运算</li><li>对运算结果进行保存和再读取，支持自动保存和手动保存</li><li>自定义运算结果储存位置</li><li>自定义字体大小</li><li>可更换窗口风格（换肤）</li><li>自动保存设置</li></ol><h1 id=\"任务分配\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#任务分配\" title=\"任务分配\"></a>任务分配</h1><ol><li>：ui设计与qt框架</li><li>：核心算法</li><li>：文件读写</li></ol><h1 id=\"开源地址\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#开源地址\" title=\"开源地址\"></a>开源地址</h1><p><a href=\"https://github.com/kawhicurry/0xCalculator\">https://github.com/kawhicurry/0xCalculator</a></p><h1 id=\"开发过程\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#开发过程\" title=\"开发过程\"></a>开发过程</h1><h2 id=\"Qt框架\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Qt框架\" title=\"Qt框架\"></a>Qt框架</h2><p>qt文件将会以平铺的方式放置在同一工程目录下，其组织结构由<code>.pro</code>文件记录，该文件类似于makefile（可以看作是qmakefile？）。其标准目录如下：</p><blockquote><p>.pro：记录文件</p><p>/Headers：略</p><p>/Sources：略</p><p>/Forms：存放<code>.ui</code>文件，实际为<code>xml</code>格式，但不建议直接编辑，所有操作应当在设计模块中完成</p><p>/Resources：存放qt标准资源（可以qt方式引用的资源）</p><p>/Other files</p></blockquote><h2 id=\"UI设计\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#UI设计\" title=\"UI设计\"></a>UI设计</h2><p>直接在qt creator的设计界面中打开<code>设计</code>模块。从画面左侧拖动组件，摆放至设计框中即可。</p><p><em>问题</em>：组件散乱</p><ul><li>左侧组件库中有<code>layout</code>组件,将其拖动至设计框中,再向layout中添加组件，即可使所有组件呈现一定规律。</li></ul><blockquote><p>布局类型：</p><p>垂直：略</p><p>水平：略</p><p>栅格（grid）：上面俩合起来</p><p>窗口：？存疑，不是很能理解这是啥</p></blockquote><p><em>问题</em>：使用layout组件后无法布局固定，启动ui界面后拖动窗口改变其大小，layout组件位置不动。</p><ul><li>应当首先在右侧<code>对象</code>框中选中主窗口（mainwindow）中的中间部件（centralwidget），右键选择布局，为整个中间部分设定大的布局，（注：主窗口除了中间部件还初始化了一个菜单栏（menubar）），然后在该布局中嵌套布局或组件。本方案选择了栅格布局，虽然只需垂直布局即可，但为了可拓展性，还是选择栅格。接下来在整个中间部分的栅格布局中，嵌套了一个垂直布局（用于输入和输出）和一个栅格布局（用于存放按键）。</li></ul><p>接下来在主窗口中添加所需的组件，分别为输入框、输出框、5*6个按键。然后可以对其属性进行可视化的设计，以下是对<code>设计</code>界面中一些工具的解释：</p><blockquote><p>右侧下方为属性框，显示了所选定组件的属性，每个组件都是层层继承而来，因此要注意每一层的具体属性以及继承关系。</p><p>右侧上方为对象框，显示了当前ui文件中所有文件属性。</p><p>正中央下方的框实际上有两个可编辑区域，一个为action editor，即为组件添加动作（可方便设置快捷键）。另一个为信号与槽。</p><p>注：信号与槽是最Qt制作ui界面中最重要的机制。</p></blockquote><p>创建槽函数：在信号与槽编辑框中点击加号创建信号与槽，然后选择信号的发送对象、发送信号量、槽、响应函数。此处的创建<strong>只支持内定的槽函数</strong>，想要自定义槽函数，需在右侧对象中找到对象，然后右键选择转到槽，接下来选择信号量之后，Qt会跳转该ui文件对应的cpp文件下，并自动创建一个该槽函数的实现（.h文件中也会自动添加声明）。接下来只需在此槽函数中编写发送信号后（触发信号发送条件），所需只需的步骤即可。</p><blockquote><p>信号量是Qt类自带的属性，某个类既有自己的属性，也有继承而来的属性。如pushButton组件继承自QAbstractButton，后者又继承自QWidget，后者又继承自QObject。对于QAbstractButton，其自带的信号有<code>clicked()</code>,<code>pressed()</code>等，对于QWidget，有<code>windowIconChanged</code>等。具体解释请参考官方文档。</p></blockquote><p><code>设计</code>界面支持大量的属性设置，如字体，背景等。并且可以直接在ui界面中即时显示，但并不推荐直接做修改。</p><p>一种渲染方式：Qt提供了qss来进行类似css的样式渲染，只需选中对象然后右键改变样式表，修改某个组件的样式表即可。Qss还提供了选择器的功能，因此，只需在某个较大的组件中设置样式表，并对不同的渲染对象进行选择即可。本方案一开始的办法就是在centralwidget组件中设置样式表，完成了酷炫的按键风格。需要注意的是，改变样式表的方法在Qt中是存在一定问题的，并且，<strong>任何写死的方法都可能在以后要修改时造成麻烦</strong>。关于样式表后面还会再进一步设定。</p><h2 id=\"模拟按键\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#模拟按键\" title=\"模拟按键\"></a>模拟按键</h2><p>一个计算器应当提供一系列的按键，因此要在栅格布局中拖入一定数量的按键。按键分为输入按键和功能按键。</p><ul><li>输入按键：0123456789ABCDEF+-*/（）</li><li>功能按键：&lt;- -&gt; DEL CE UP DOWN =</li></ul><p>对于输入按键，按下按键后应当在输入框中显示对应的输入，同时这些按键应当有对应的键盘输入。</p><p>对于输出按键，左移和右移是为了移动输入框中的光标。DEL清除一个字符，CE要同时清除输入和输出框。UP和DOWN提供了查看历史功能。等号是整个计算器的核心功能，按下等号后，应当读取输入框中的算式，进行计算后将结果字符串返回至输出框中。</p><p>通过在组件上右键选择 转到槽 可以快捷创建槽函数。示例如图：</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.h</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_left_bracket_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">insertPlainText</span>(<span class=\"string\">&quot;(&quot;</span>);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>手动创建几个后，就可以发现其规矩。一个槽函数的名称由<code>on_name_action</code>组成。<code>pushButton_left_bracket</code>是改按键的名称，这个名称需要在ui文件中指定，当拖动pushButton的时候，qt会按照12345依次给其一个默认名称，并且上面的默认文字都是pushButton。因此对于声明，可以用宏生成。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindwo.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> clicked_func(name) void on_pushButton_##name##_clicked();</span></span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">0</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">1</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">2</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">clicked_func</span>(<span class=\"number\">3</span>);</span><br /><span class=\"line\"><span class=\"comment\">//...</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> triggered_func(name) void on_action##name##_triggered();</span></span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Author);</span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Save) <span class=\"built_in\">triggered_func</span>(Read);</span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(History_location);</span><br /><span class=\"line\">  <span class=\"built_in\">triggered_func</span>(Auto_Save);</span><br /></pre></td></tr></table></figure><p>对于实现，部分直接输入的槽函数也可以用宏生成</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_insert_func(name)                         \\</span></span><br /><span class=\"line\"><span class=\"meta\">  void MainWindow::on_pushButton_##name##_clicked() &#123; \\</span></span><br /><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;setFocus();                \\</span></span><br /><span class=\"line\"><span class=\"meta\">    ui-&gt;textBrowser_input-&gt;insertPlainText(#name);    \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">0</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">1</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">2</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">3</span>);</span><br /><span class=\"line\"><span class=\"built_in\">set_insert_func</span>(<span class=\"number\">4</span>);</span><br /></pre></td></tr></table></figure><p>剩下的就只能自己写咯。</p><h2 id=\"输入输出框\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#输入输出框\" title=\"输入输出框\"></a>输入输出框</h2><p>qt为用户提供了<code>text Browser</code>,<code>text Edit</code>,<code>Plain text edit</code>,<code>line edit</code>等组件作为文本框。这里选择了text Browser，目的是屏蔽直接复制粘贴输入，防止非法字符进入。结果后面发现<code>text Browser</code>是由<code>text Edit</code>继承而来，因此browser也可以提供输入功能（离谱，read Only属性。</p><p>所有的输入按键都将在输入框中插入一个对应的字符。这里只需要调用<code>text Browser</code>类中自带的public function member：<code>insertPlainText(QString)</code>。</p><p><em>问题</em>：文本框中的光标只有在选中文本框时才会显示，如果使用鼠标点击按键进行输入，输入框中的光标实际仍然存在但不显示。</p><ul><li>为了使得光标时刻存在，这里使用了一个简单粗暴的方法，为所有按键功能加上<code>setFocus()</code>。从而保证焦点始终在输入框中。</li></ul><p>对于输出框，每次显示结果都是更新所有内容（而不是插入），因此需要<code>setPlainText</code>。</p><h2 id=\"等号\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#等号\" title=\"等号\"></a>等号</h2><p>等号按键是计算器最核心的按键，以下为等号按键的槽函数</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_equal_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\"></span><br /><span class=\"line\">  Location::isRead = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  QString s = ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">toPlainText</span>();</span><br /><span class=\"line\">  QString rst = <span class=\"built_in\">parser</span>(s);</span><br /><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setPlainText</span>(rst);</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (Location::autoSave) &#123;</span><br /><span class=\"line\">    <span class=\"built_in\">save</span>(Location::filePath, s, rst);</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>按下等号后，程序首先保证焦点仍然在输入框口上，然后讲是否正在读取历史记录按键设置为0（这讲在后面的历史记录读取中说到），然后获取输入框中的内容，交给由竞赛大佬@龚程昊编写的parser函数进行处理（这将在后面数据处理中说到），然后将parser函数返回的字符串（QString）显示到输出框中，然后在自动保存功能开启的情况下，保存至本地文件中。</p><h2 id=\"数据处理\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#数据处理\" title=\"数据处理\"></a>数据处理</h2><p>等会儿copy大佬写的东西，大致思路是使用栈和转化为前缀表达式。</p><p>但大佬使用的使用的是std库，并且是作为一个单独的cpp程序书写的（方便调试）。因此，这里将源文件复制到parser文件中，并将main函数改写成接受<code>QString</code>作为参数，返回<code>QString</code>的parser()函数。这里用到了<code>QString::toStdString</code>和<code>QString::fromStdString</code>。</p><p>记录几个当时测试出来的bug：</p><ol><li>只写一个数后按等号，直接返回0</li><li>没有考虑负数</li><li>没有考虑溢出</li></ol><p>附上代码</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /><span class=\"line\">40</span><br /><span class=\"line\">41</span><br /><span class=\"line\">42</span><br /><span class=\"line\">43</span><br /><span class=\"line\">44</span><br /><span class=\"line\">45</span><br /><span class=\"line\">46</span><br /><span class=\"line\">47</span><br /><span class=\"line\">48</span><br /><span class=\"line\">49</span><br /><span class=\"line\">50</span><br /><span class=\"line\">51</span><br /><span class=\"line\">52</span><br /><span class=\"line\">53</span><br /><span class=\"line\">54</span><br /><span class=\"line\">55</span><br /><span class=\"line\">56</span><br /><span class=\"line\">57</span><br /><span class=\"line\">58</span><br /><span class=\"line\">59</span><br /><span class=\"line\">60</span><br /><span class=\"line\">61</span><br /><span class=\"line\">62</span><br /><span class=\"line\">63</span><br /><span class=\"line\">64</span><br /><span class=\"line\">65</span><br /><span class=\"line\">66</span><br /><span class=\"line\">67</span><br /><span class=\"line\">68</span><br /><span class=\"line\">69</span><br /><span class=\"line\">70</span><br /><span class=\"line\">71</span><br /><span class=\"line\">72</span><br /><span class=\"line\">73</span><br /><span class=\"line\">74</span><br /><span class=\"line\">75</span><br /><span class=\"line\">76</span><br /><span class=\"line\">77</span><br /><span class=\"line\">78</span><br /><span class=\"line\">79</span><br /><span class=\"line\">80</span><br /><span class=\"line\">81</span><br /><span class=\"line\">82</span><br /><span class=\"line\">83</span><br /><span class=\"line\">84</span><br /><span class=\"line\">85</span><br /><span class=\"line\">86</span><br /><span class=\"line\">87</span><br /><span class=\"line\">88</span><br /><span class=\"line\">89</span><br /><span class=\"line\">90</span><br /><span class=\"line\">91</span><br /><span class=\"line\">92</span><br /><span class=\"line\">93</span><br /><span class=\"line\">94</span><br /><span class=\"line\">95</span><br /><span class=\"line\">96</span><br /><span class=\"line\">97</span><br /><span class=\"line\">98</span><br /><span class=\"line\">99</span><br /><span class=\"line\">100</span><br /><span class=\"line\">101</span><br /><span class=\"line\">102</span><br /><span class=\"line\">103</span><br /><span class=\"line\">104</span><br /><span class=\"line\">105</span><br /><span class=\"line\">106</span><br /><span class=\"line\">107</span><br /><span class=\"line\">108</span><br /><span class=\"line\">109</span><br /><span class=\"line\">110</span><br /><span class=\"line\">111</span><br /><span class=\"line\">112</span><br /><span class=\"line\">113</span><br /><span class=\"line\">114</span><br /><span class=\"line\">115</span><br /><span class=\"line\">116</span><br /><span class=\"line\">117</span><br /><span class=\"line\">118</span><br /><span class=\"line\">119</span><br /><span class=\"line\">120</span><br /><span class=\"line\">121</span><br /><span class=\"line\">122</span><br /><span class=\"line\">123</span><br /><span class=\"line\">124</span><br /><span class=\"line\">125</span><br /><span class=\"line\">126</span><br /><span class=\"line\">127</span><br /><span class=\"line\">128</span><br /><span class=\"line\">129</span><br /><span class=\"line\">130</span><br /><span class=\"line\">131</span><br /><span class=\"line\">132</span><br /><span class=\"line\">133</span><br /><span class=\"line\">134</span><br /><span class=\"line\">135</span><br /><span class=\"line\">136</span><br /><span class=\"line\">137</span><br /><span class=\"line\">138</span><br /><span class=\"line\">139</span><br /><span class=\"line\">140</span><br /><span class=\"line\">141</span><br /><span class=\"line\">142</span><br /><span class=\"line\">143</span><br /><span class=\"line\">144</span><br /><span class=\"line\">145</span><br /><span class=\"line\">146</span><br /><span class=\"line\">147</span><br /><span class=\"line\">148</span><br /><span class=\"line\">149</span><br /><span class=\"line\">150</span><br /><span class=\"line\">151</span><br /><span class=\"line\">152</span><br /><span class=\"line\">153</span><br /><span class=\"line\">154</span><br /><span class=\"line\">155</span><br /><span class=\"line\">156</span><br /><span class=\"line\">157</span><br /><span class=\"line\">158</span><br /><span class=\"line\">159</span><br /><span class=\"line\">160</span><br /><span class=\"line\">161</span><br /><span class=\"line\">162</span><br /><span class=\"line\">163</span><br /><span class=\"line\">164</span><br /><span class=\"line\">165</span><br /><span class=\"line\">166</span><br /><span class=\"line\">167</span><br /><span class=\"line\">168</span><br /><span class=\"line\">169</span><br /><span class=\"line\">170</span><br /><span class=\"line\">171</span><br /><span class=\"line\">172</span><br /><span class=\"line\">173</span><br /><span class=\"line\">174</span><br /><span class=\"line\">175</span><br /><span class=\"line\">176</span><br /><span class=\"line\">177</span><br /><span class=\"line\">178</span><br /><span class=\"line\">179</span><br /><span class=\"line\">180</span><br /><span class=\"line\">181</span><br /><span class=\"line\">182</span><br /><span class=\"line\">183</span><br /><span class=\"line\">184</span><br /><span class=\"line\">185</span><br /><span class=\"line\">186</span><br /><span class=\"line\">187</span><br /><span class=\"line\">188</span><br /><span class=\"line\">189</span><br /><span class=\"line\">190</span><br /><span class=\"line\">191</span><br /><span class=\"line\">192</span><br /><span class=\"line\">193</span><br /><span class=\"line\">194</span><br /><span class=\"line\">195</span><br /><span class=\"line\">196</span><br /><span class=\"line\">197</span><br /><span class=\"line\">198</span><br /><span class=\"line\">199</span><br /><span class=\"line\">200</span><br /><span class=\"line\">201</span><br /><span class=\"line\">202</span><br /><span class=\"line\">203</span><br /><span class=\"line\">204</span><br /><span class=\"line\">205</span><br /><span class=\"line\">206</span><br /><span class=\"line\">207</span><br /><span class=\"line\">208</span><br /><span class=\"line\">209</span><br /><span class=\"line\">210</span><br /><span class=\"line\">211</span><br /><span class=\"line\">212</span><br /><span class=\"line\">213</span><br /><span class=\"line\">214</span><br /><span class=\"line\">215</span><br /><span class=\"line\">216</span><br /><span class=\"line\">217</span><br /><span class=\"line\">218</span><br /><span class=\"line\">219</span><br /><span class=\"line\">220</span><br /><span class=\"line\">221</span><br /><span class=\"line\">222</span><br /><span class=\"line\">223</span><br /><span class=\"line\">224</span><br /><span class=\"line\">225</span><br /><span class=\"line\">226</span><br /><span class=\"line\">227</span><br /><span class=\"line\">228</span><br /><span class=\"line\">229</span><br /><span class=\"line\">230</span><br /><span class=\"line\">231</span><br /><span class=\"line\">232</span><br /><span class=\"line\">233</span><br /><span class=\"line\">234</span><br /><span class=\"line\">235</span><br /><span class=\"line\">236</span><br /><span class=\"line\">237</span><br /><span class=\"line\">238</span><br /><span class=\"line\">239</span><br /><span class=\"line\">240</span><br /><span class=\"line\">241</span><br /><span class=\"line\">242</span><br /><span class=\"line\">243</span><br /><span class=\"line\">244</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//parser.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;parser.h&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">pd</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pri</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">// priority</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"string\">&#x27;)&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">255</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">char</span> i)</span>  <span class=\"comment\">//乱码</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> ((i &lt;= <span class=\"number\">57</span> &amp;&amp; i &gt;= <span class=\"number\">48</span>) || (i &gt;= <span class=\"number\">65</span> &amp;&amp; i &lt;= <span class=\"number\">70</span>) || i == <span class=\"string\">&#x27;+&#x27;</span> || i == <span class=\"string\">&#x27;-&#x27;</span> ||</span><br /><span class=\"line\">      i == <span class=\"string\">&#x27;*&#x27;</span> || i == <span class=\"string\">&#x27;/&#x27;</span> || i == <span class=\"string\">&#x27;(&#x27;</span> || i == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\">QString <span class=\"title\">parser</span><span class=\"params\">(QString expression)</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1007</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> R = LONG_MAX;</span><br /><span class=\"line\">  <span class=\"keyword\">char</span> s[N], stack1[N];</span><br /><span class=\"line\">  <span class=\"keyword\">long</span> read[N], sta[N], stack2[N], stt[N];</span><br /><span class=\"line\">  <span class=\"keyword\">bool</span> f[N] = &#123;<span class=\"number\">0</span>&#125;, flag[N] = &#123;<span class=\"number\">0</span>&#125;, ff = <span class=\"number\">0</span>, fff = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  string c, sc;</span><br /><span class=\"line\">  string str, as = expression.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">  str = <span class=\"string\">&quot;0+&quot;</span> + as;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> l = str.<span class=\"built_in\">length</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br /><span class=\"line\">    s[i] = str[i];</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">judge</span>(s[i])) &#123;</span><br /><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span> &amp;&amp; (s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> || s[i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>)) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span> &amp;&amp; (s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;+&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;-&#x27;</span> || s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;*&#x27;</span> ||</span><br /><span class=\"line\">                        s[i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;/&#x27;</span>))</span><br /><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]) &amp;&amp; s[l - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;)&#x27;</span>) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> st = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; i++)  <span class=\"comment\">//括号是否匹配</span></span><br /><span class=\"line\">  &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;(&#x27;</span>) st++;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;)&#x27;</span>) st--;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (st != <span class=\"number\">0</span>) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>, m = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">while</span> (j &lt; l &amp;&amp; ff == <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//数字</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (s[j] &lt;= <span class=\"number\">57</span> &amp;&amp; s[j] &gt;= <span class=\"number\">48</span>) &#123;</span><br /><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">48</span>;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">        k++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[j] &gt;= <span class=\"number\">65</span> &amp;&amp; s[j] &lt;= <span class=\"number\">70</span>) &#123;</span><br /><span class=\"line\">        sta[k] = s[j] - <span class=\"number\">55</span>;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">        k++;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pd</span>(s[j]))  <span class=\"comment\">//符号</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[j - <span class=\"number\">1</span>]) &amp;&amp; j &gt; <span class=\"number\">0</span>)  <span class=\"comment\">//前面的数字</span></span><br /><span class=\"line\">      &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br /><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br /><span class=\"line\">          cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br /><span class=\"line\">          k--;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        read[m] = cnt;</span><br /><span class=\"line\">        m++;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">        read[m] = c;</span><br /><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">        m++;</span><br /><span class=\"line\"></span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">//前面的符号</span></span><br /><span class=\"line\">        <span class=\"keyword\">char</span> c = s[j];</span><br /><span class=\"line\">        read[m] = c;</span><br /><span class=\"line\">        f[m] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">        m++;</span><br /><span class=\"line\">        j++;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">pd</span>(s[l - <span class=\"number\">1</span>]))  <span class=\"comment\">//数字</span></span><br /><span class=\"line\">  &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (k &gt; <span class=\"number\">9</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> h = <span class=\"number\">0</span>; k &gt; <span class=\"number\">0</span>; h++) &#123;</span><br /><span class=\"line\">      cnt += sta[k - <span class=\"number\">1</span>] * <span class=\"built_in\">pow</span>(<span class=\"number\">16</span>, h);</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (cnt &gt; R) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br /><span class=\"line\">      k--;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    read[m] = cnt;</span><br /><span class=\"line\">    m++;</span><br /><span class=\"line\">    j++;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m - <span class=\"number\">1</span>; i++) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br /><span class=\"line\">          <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) == <span class=\"number\">2</span>) &#123;</span><br /><span class=\"line\">        ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span> &amp;&amp; f[i + <span class=\"number\">1</span>] == <span class=\"number\">1</span> &amp;&amp; <span class=\"built_in\">pri</span>(read[i]) &gt;= <span class=\"number\">1</span> &amp;&amp;</span><br /><span class=\"line\">               <span class=\"built_in\">pri</span>(read[i + <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span>) &#123;</span><br /><span class=\"line\">      ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">0</span>;  <span class=\"comment\">//反缀表达式</span></span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">      stack2[a] = read[i];</span><br /><span class=\"line\">      a++;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (f[i] == <span class=\"number\">1</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br /><span class=\"line\">        stack1[b] = <span class=\"string\">&#x27;(&#x27;</span>;</span><br /><span class=\"line\">        b++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">1</span>)  <span class=\"comment\">//+-</span></span><br /><span class=\"line\">      &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) &gt;= <span class=\"number\">1</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          b--;</span><br /><span class=\"line\">          a++;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        stack1[b] = read[i];</span><br /><span class=\"line\">        b++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">pri</span>(read[i]) == <span class=\"number\">2</span>)  <span class=\"comment\">//*/</span></span><br /><span class=\"line\">      &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pri</span>(stack1[b - <span class=\"number\">1</span>]) == <span class=\"number\">2</span> &amp;&amp; b &gt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          b--;</span><br /><span class=\"line\">          a++;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        stack1[b] = read[i];</span><br /><span class=\"line\">        b++;</span><br /><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (read[i] == <span class=\"string\">&#x27;)&#x27;</span>) &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">while</span> (stack1[b - <span class=\"number\">1</span>] != <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br /><span class=\"line\">          stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          b--;</span><br /><span class=\"line\">          a++;</span><br /><span class=\"line\">        &#125;</span><br /><span class=\"line\">        b--;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">while</span> (b &gt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">    stack2[a] = stack1[b - <span class=\"number\">1</span>];</span><br /><span class=\"line\">    flag[a] = <span class=\"number\">1</span>;</span><br /><span class=\"line\">    a++;</span><br /><span class=\"line\">    b--;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"comment\">// calculation</span></span><br /><span class=\"line\">  <span class=\"keyword\">int</span> g = <span class=\"number\">0</span>, cn = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; a; i++) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (!flag[i])  <span class=\"comment\">//数字</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      stt[g] = stack2[i];</span><br /><span class=\"line\">      g++;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (flag[i])  <span class=\"comment\">//符号</span></span><br /><span class=\"line\">    &#123;</span><br /><span class=\"line\">      <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (stack2[i]) &#123;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;+&#x27;</span>:</span><br /><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] + stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;-&#x27;</span>:</span><br /><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] - stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;*&#x27;</span>:</span><br /><span class=\"line\">          cn = stt[g - <span class=\"number\">2</span>] * stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (cn &gt; R || cn &lt; -R) ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;/&#x27;</span>:</span><br /><span class=\"line\">          <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] != <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">            cn = stt[g - <span class=\"number\">2</span>] / stt[g - <span class=\"number\">1</span>];</span><br /><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (stt[g - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">            ff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br /><span class=\"line\">          &#125;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">      g -= <span class=\"number\">2</span>;</span><br /><span class=\"line\">      stt[g] = cn;</span><br /><span class=\"line\">      g++;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> x;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> cnn = cn;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (cn == <span class=\"number\">0</span> &amp;&amp; !ff) &#123;</span><br /><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;str&lt;&lt;&quot;=&quot;&lt;&lt;cn&lt;&lt;endl;</span></span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br /><span class=\"line\">    fff = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">while</span> (cn != <span class=\"number\">0</span> &amp;&amp; !ff)  <span class=\"comment\">//转十六进制</span></span><br /><span class=\"line\">  &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (cn &gt;= <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">10</span>)</span><br /><span class=\"line\">        c = x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">else</span></span><br /><span class=\"line\">        c = x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br /><span class=\"line\">      sc = c + sc;</span><br /><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cn &lt;= <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">      x = cn % <span class=\"number\">16</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">-10</span>)</span><br /><span class=\"line\">        c = -x + <span class=\"string\">&#x27;0&#x27;</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">else</span></span><br /><span class=\"line\">        c = -x + <span class=\"string\">&#x27;A&#x27;</span> - <span class=\"number\">10</span>;</span><br /><span class=\"line\">      sc = c + sc;</span><br /><span class=\"line\">      cn /= <span class=\"number\">16</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (cnn &lt; <span class=\"number\">0</span>) &#123;</span><br /><span class=\"line\">    sc = <span class=\"string\">&#x27;-&#x27;</span> + sc;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!ff &amp;&amp; !fff) &#123;</span><br /><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;as&lt;&lt;&quot;=&quot;;</span></span><br /><span class=\"line\">    <span class=\"comment\">//        cout&lt;&lt;sc&lt;&lt;endl;</span></span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (sc == <span class=\"string\">&quot;-80000000&quot;</span>) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;Detect Overflow&quot;</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(sc);</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;Formula Error&quot;</span>;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /></pre></td></tr></table></figure><p>贴代码的时候才发现大佬写了一个pd（判断）和一个judge（还是判断）。算了算了，能用就行（</p><h2 id=\"历史记录\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#历史记录\" title=\"历史记录\"></a>历史记录</h2><p>如果只是作为计算器，以上功能就已经可以算完成了。但大多数计算器都是有历史记录功能的，因此这个计算器也该有一个。</p><p>这里将历史记录分为底层和顶层两部分来设计，顶层使用Qt框架，而底层使用c的基本库，从而实现更加原子化和方便的操作。</p><p>顶层实现的用户接口功能：</p><ul><li>手动保存当前结果</li><li>选择是否自动保存结果</li><li>选择保存位置</li><li>读取历史记录</li></ul><p>底层实现的文本的读写功能</p><ul><li>获取时间</li><li>记录结果</li><li>写入和读取</li></ul><h3 id=\"底层设计细节\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#底层设计细节\" title=\"底层设计细节\"></a>底层设计细节</h3><p>保存功能被设计为，获取当前时间和本次运算的算式和结果，以新行的方式追加到某文件的结尾。保存功能的底层设计都被保存在<code>saving</code>文件下。</p><p>为此底层使用std库设计了<code>save()</code>函数。该函数还调用了<code>getCurrentTime()</code>来获取当前时间。当然，这个函数也是由<code>main()</code>函数修改而来，由std框架接入了qt框架。源码如下：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//saving.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> string <span class=\"title\">getCurrentTime</span><span class=\"params\">()</span>  <span class=\"comment\">//输出当前时间</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"keyword\">time_t</span> t = <span class=\"built_in\">time</span>(<span class=\"number\">0</span>);</span><br /><span class=\"line\">  <span class=\"keyword\">char</span> ch[<span class=\"number\">64</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br /><span class=\"line\">  <span class=\"built_in\">strftime</span>(ch, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(ch) - <span class=\"number\">1</span>, <span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, <span class=\"built_in\">localtime</span>(&amp;t));</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> ch;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">save</span><span class=\"params\">(QString location, QString fomula, QString data)</span> </span>&#123;</span><br /><span class=\"line\">  string addr = location.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">  fstream f;</span><br /><span class=\"line\">  f.<span class=\"built_in\">open</span>(addr, ios::out | ios::app);</span><br /><span class=\"line\">  f &lt;&lt; <span class=\"built_in\">getCurrentTime</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; fomula.<span class=\"built_in\">toStdString</span>() &lt;&lt; <span class=\"string\">&quot;=&quot;</span></span><br /><span class=\"line\">    &lt;&lt; data.<span class=\"built_in\">toStdString</span>()</span><br /><span class=\"line\">    &lt;&lt; endl;  <span class=\"comment\">//变量addr、以及gch的等式和输出结果变量还需加进去</span></span><br /><span class=\"line\">  f.<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>除了保存结果外，还需要读取结果，读取结果需要始终从最后一行开始往上读。经历了一系列讨论之后，本项目决定使用读取整个文件来获取所有的行数，并根据行数来获取内容。为此有了<code>CountLine()</code>和<code>readLine()</code>两个函数：</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CountLines</span><span class=\"params\">(QString filename)</span> </span>&#123;</span><br /><span class=\"line\">  ifstream f;</span><br /><span class=\"line\">  <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br /><span class=\"line\">  string tmp;</span><br /><span class=\"line\">  string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">  <span class=\"comment\">// ios::in 表示以只读的方式读取文件</span></span><br /><span class=\"line\">  f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br /><span class=\"line\">  <span class=\"comment\">//文件打开失败:返回0</span></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (f.<span class=\"built_in\">fail</span>()) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    <span class=\"comment\">//文件存在</span></span><br /><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">getline</span>(f, tmp, <span class=\"string\">&#x27;\\n&#x27;</span>)) &#123;</span><br /><span class=\"line\">      n++;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    f.<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\">QString <span class=\"title\">ReadLine</span><span class=\"params\">(QString filename, <span class=\"keyword\">int</span> line)</span>  <span class=\"comment\">//读取指定行文件</span></span></span><br /><span class=\"line\"><span class=\"function\"></span>&#123;</span><br /><span class=\"line\">  <span class=\"comment\">// line行数限制 1 - lines</span></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (line &gt; <span class=\"number\">0</span> &amp;&amp; line &lt;= <span class=\"built_in\">CountLines</span>(filename)) &#123;</span><br /><span class=\"line\">    ifstream f;</span><br /><span class=\"line\">    string stdfilename = filename.<span class=\"built_in\">toStdString</span>();</span><br /><span class=\"line\">    f.<span class=\"built_in\">open</span>(stdfilename, ios::in);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    vector&lt;string&gt; strVec;</span><br /><span class=\"line\">    <span class=\"comment\">//行0 - 行lines对应strvect[0] - strvect[lines]</span></span><br /><span class=\"line\">    <span class=\"keyword\">while</span> (!f.<span class=\"built_in\">eof</span>()) &#123;</span><br /><span class=\"line\">      string inbuf;</span><br /><span class=\"line\">      <span class=\"built_in\">getline</span>(f, inbuf, <span class=\"string\">&#x27;\\n&#x27;</span>);</span><br /><span class=\"line\">      strVec.<span class=\"built_in\">push_back</span>(inbuf);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> QString::<span class=\"built_in\">fromStdString</span>(strVec[line - <span class=\"number\">1</span>]);</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>读取整个文件并计算行数并不是一个效率高的方式，但在文件不大和不追求高效率的条件下，这是最好的实践方式。因为考虑这里还需要考虑到连续读取历史文件。</p><p>当用户按下<code>UP</code>按键时，表示用户开始读取历史文件。用户首先查看的应该是历史文件的最后一行，当用户再次按下<code>UP</code>时，读取倒数第二行，依次类推。为了实现该功能，这里使用了一个全局变量<code>line</code>表示当前正在读取的行数，该行数被初始化为历史记录的总行数。然后再次读取将会<code>--line</code>后读取。当用户按下<code>DOWN</code>按键时，++line后读取。</p><p>这里就要考虑到另一个问题，读取一定历史记录后，用户重新进行计算，然后再次查看历史记录，这样行数应当从新的历史记录最后一行开始计算。为此，这里引入了<code>isRead</code>变量，该变量初始化为<code>0</code>，表示现在未在读取。首次按下<code>UP</code>按键时，该变量置<code>1</code>，同时将<code>line</code>变量初始化为当前历史记录行数。当用户按下<code>UP</code>或<code>DOWN</code>按键时，正常修改<code>line</code>变量的值并进行读取即可。当用户按下<code>=</code>或手动保存时，需要将<code>isRead</code>置零。这样下一次按下<code>UP</code>时，将重新读取历史文件行数并为<code>line</code>赋值。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"comment\">//等号的槽函数在上面</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Up_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br /><span class=\"line\">    --Location::line;</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    Location::line = <span class=\"built_in\">CountLines</span>(Location::filePath);</span><br /><span class=\"line\">    Location::isRead = <span class=\"number\">1</span>;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_pushButton_Down_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  ui-&gt;textBrowser_input-&gt;<span class=\"built_in\">setFocus</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (Location::isRead) &#123;</span><br /><span class=\"line\">    ++Location::line;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  ui-&gt;textBrowser_output-&gt;<span class=\"built_in\">setText</span>(<span class=\"built_in\">ReadLine</span>(Location::filePath, Location::line));</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>保存和读取的路径将在<code>顶层设计细节</code>中进一步讨论。</p><h3 id=\"顶层设计细节\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#顶层设计细节\" title=\"顶层设计细节\"></a>顶层设计细节</h3><p>这里在menubar中设置了一个<code>history location</code>按键，用于修改历史文件的存放位置。当按下此按键时，程序应当打开一个新的窗口，因此，需要首先在源文件中创建一个新的窗口。右键点击<code>项目</code>，选择<code>add new</code>，选择<code>qt设计师类</code>，然后会分别在三个文件夹中依次得到头文件、源文件、ui设计文件。然后需要在主窗口中设置点击<code>history location</code>按键打开新窗口。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mainwindow.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionHistory_location_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  Location *new_win = <span class=\"keyword\">new</span> <span class=\"built_in\">Location</span>();</span><br /><span class=\"line\">  new_win-&gt;<span class=\"built_in\">show</span>();</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>注意</strong>：记得在<code>mainwindow.h</code>中include<code>location.h</code>，按下打开新窗口实际上就是创建一个新的Location窗口，然后展示。</p><p>接下来就是在<code>location.ui</code>中修改和设计可视化窗口，此项目使用了栅格布局，在左侧设置了一个较大的<code>textBrowser</code>和较小的<code>lineEdit</code>（设为不可修改，用于给出提示），在右侧依次设置了<code>选择文件</code>，<code>选择文件夹</code>，<code>确定</code>，<code>取消</code> 四个按键。</p><blockquote><p>选择文件：调用Qt库，打开系统默认的文件选择框，设置必须选择.txt格式结尾的文件，将返回的结果输出至<code>textBrowser</code>。</p><p>选择文件夹：同上，但是选择的是文件夹，并且返回的是存在的文件夹的路径，将返回的结果加上<code>/result.txt</code>后输入至<code>textBrowser</code>。</p><p>确定：按下后，读取<code>textBrowser</code>中的路径，检查其合法性（因为一开始<code>textBrowser</code>设置了可以直接更改，因此可能会输入奇怪的路径），若不合法则在<code>lineEdit</code>中给出相应的报错（格式不合法或路径不合法）。若合法，则检查文件是否存在，不存在则创建。当一切都合理以后，将全局变量<code>filePath</code>设为文本框中的内容，并关闭<code>Location</code>窗口。</p><p>取消：直接关闭，不做任何修改。</p></blockquote><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_path_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  QString file_name =</span><br /><span class=\"line\">      QFileDialog::<span class=\"built_in\">getOpenFileName</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择txt文件&quot;</span>, <span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;*.txt&quot;</span>);</span><br /><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(file_name);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_dir_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  QString dir_name = QFileDialog::<span class=\"built_in\">getExistingDirectory</span>(<span class=\"literal\">NULL</span>, <span class=\"string\">&quot;选择文件夹&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br /><span class=\"line\">  ui-&gt;textEdit-&gt;<span class=\"built_in\">setText</span>(dir_name + <span class=\"string\">&quot;/result.txt&quot;</span>);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_cancel_clicked</span><span class=\"params\">()</span> </span>&#123; Location::<span class=\"built_in\">close</span>(); &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Location::on_pushButton_sure_clicked</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  QString new_path = ui-&gt;textEdit-&gt;<span class=\"built_in\">toPlainText</span>();</span><br /><span class=\"line\">  <span class=\"function\">QFileInfo <span class=\"title\">info</span><span class=\"params\">(new_path)</span></span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!info.<span class=\"built_in\">exists</span>()) &#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span> (new_path.<span class=\"built_in\">contains</span>(<span class=\"string\">&quot;.txt&quot;</span>)) &#123;</span><br /><span class=\"line\">      <span class=\"function\">QFile <span class=\"title\">f</span><span class=\"params\">(new_path)</span></span>;</span><br /><span class=\"line\">      f.<span class=\"built_in\">open</span>(QIODevice::WriteOnly);</span><br /><span class=\"line\">      f.<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">      ui-&gt;prompt-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;路径或格式不合法，请重新输入&quot;</span>);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  Location::filePath=new_path;</span><br /><span class=\"line\">  Location::<span class=\"built_in\">close</span>();</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>自动保存功能被设计为主窗口中菜单栏中的一个按键，默认为开启状态，显示为<code>Auto Save On</code>，当点击该按键后，槽函数将该文本替换为<code>Auto Save Off</code>，并将全局变量<code>autoSave</code>置零。</p><p><code>filePath</code>和<code>autoSave</code>以及底层中的<code>isRead</code>和<code>line</code>都设计为一个全局变量，便于主窗口调用。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//location.h</span></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Location</span> :</span> <span class=\"keyword\">public</span> QDialog &#123;</span><br /><span class=\"line\"> <span class=\"keyword\">public</span>:</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> QString filePath;</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> line;</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> isRead;</span><br /><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> autoSave;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//location.cpp</span></span><br /><span class=\"line\">QString Location::filePath = <span class=\"string\">&quot;result.txt&quot;</span>;</span><br /><span class=\"line\"><span class=\"keyword\">int</span> Location::line = <span class=\"number\">0</span>;</span><br /><span class=\"line\"><span class=\"keyword\">bool</span> Location::isRead = <span class=\"number\">0</span>;</span><br /><span class=\"line\"><span class=\"keyword\">bool</span> Location::autoSave = <span class=\"number\">1</span>;</span><br /></pre></td></tr></table></figure><p>在主窗口中，只有用户按下等号（并且自动保存功能开启）或手动保存（在<code>menubar</code>中设置了一个保存按键并且设置了快捷键）时，才会保存。因此只需在这些地方加入<code>save()</code>函数即可。当然，也要有对<code>autoSave</code>的判断。</p><h2 id=\"样式设定\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#样式设定\" title=\"样式设定\"></a>样式设定</h2><p>前面提到了可以在<code>ui</code>文件中直接修改样式，但这种方式并不利于后面的修改，因此我们选择直接调用函数的方式。如要为<code>centralWidget</code>设定样式，可以调用<code>setStyelSheet()</code>，后接一个QString，该字符串中直接书写qss内容。</p><p>这里选择了另一种方式，使用qt的资源文件管理功能来存储单独的qss文件，然后以前缀引用的方式来调用这些文件。</p><p>在<code>项目</code>中右键新建<code>qt resource file</code>，设定名称后打开管理界面，点击添加前缀<code>add prefix</code>。然后添加文件<code>add Files</code>。前缀决定了调用的方式（将会在源代码中演示）。文件可以新建一个<code>general file</code>后添加，也可以将其他方式创建的qss文件加入。</p><p>引入的资源可以以<code>QFile</code>的方式引用。本项目在菜单栏中添加了一个黑色主题的选项，其槽函数如下</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionBlack_theme_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  globalQss = <span class=\"string\">&quot;:/Black.qss&quot;</span>;</span><br /><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">defaultQss</span><span class=\"params\">(globalQss)</span></span>;</span><br /><span class=\"line\">  defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br /><span class=\"line\">  QString qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br /><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><code>/</code>为我设定的前缀，只需以冒号开头，加上前缀和文件，即表明在应用qt指定好的资源文件。接下来就只需打开该文件并读取其内容，然后为需要的组件设定qss样式即可。</p><p><strong>注意</strong>：使用qss的一些麻烦：后面我希望能设定字体的大小、样式等，但这时通过<code>setFont()</code>等函数并不起作用。原因估计是qss的优先级很高，直接设定将不起作用。这时我只能再写一个<code>changeStyle()</code>函数，通过qss样式表更新来进行样式更新</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::changeStyle</span><span class=\"params\">(QString newStyle, QWidget *widget)</span> </span>&#123;</span><br /><span class=\"line\">  QString oldStyle = widget-&gt;<span class=\"built_in\">styleSheet</span>();</span><br /><span class=\"line\">  oldStyle += newStyle;</span><br /><span class=\"line\">  widget-&gt;<span class=\"built_in\">setStyleSheet</span>(oldStyle);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>所以这里我只写了改变字体的函数。</p><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">MainWindow::on_actionLarge_font_size_triggered</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"built_in\">changeStyle</span>(<span class=\"string\">&quot;*&#123;font:30px;&#125;&quot;</span>, MainWindow::<span class=\"built_in\">centralWidget</span>());</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h2 id=\"保存设置\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#保存设置\" title=\"保存设置\"></a>保存设置</h2><p>类似于文件的保存位置，是否自动保存等功能，每次重新启动程序后都会按照程序的设定重新初始化。为了使得这些设定能被保存下来，需要使用一个文件将这些配置保存下来。恰好最近见到了许多<code>ini</code>格式文件，qt也提供了<code>QSetting</code>及配套的<code>ini</code>配置文件读写。</p><p>配置文件应当在主窗口创建时被读取，在主窗口被销毁时被存入。因此只需在<code>mainwindow</code>的构造函数和析构函数中加入读写<code>ini</code>文件的步骤即可。需要注意的是，要考虑<code>ini</code>文件不存在的情况，不存在时需要使用程序的内置设定。</p> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /><span class=\"line\">35</span><br /><span class=\"line\">36</span><br /><span class=\"line\">37</span><br /><span class=\"line\">38</span><br /><span class=\"line\">39</span><br /><span class=\"line\">40</span><br /><span class=\"line\">41</span><br /><span class=\"line\">42</span><br /><span class=\"line\">43</span><br /><span class=\"line\">44</span><br /><span class=\"line\">45</span><br /><span class=\"line\">46</span><br /><span class=\"line\">47</span><br /><span class=\"line\">48</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">MainWindow::<span class=\"built_in\">MainWindow</span>(QWidget *parent)</span><br /><span class=\"line\">    : <span class=\"built_in\">QMainWindow</span>(parent), <span class=\"built_in\">ui</span>(<span class=\"keyword\">new</span> Ui::MainWindow) &#123;</span><br /><span class=\"line\">  ui-&gt;<span class=\"built_in\">setupUi</span>(<span class=\"keyword\">this</span>);</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"keyword\">this</span>-&gt;<span class=\"built_in\">grabKeyboard</span>();</span><br /><span class=\"line\"></span><br /><span class=\"line\">  QSettings *iniRead = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br /><span class=\"line\">  QString iniAuto = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;autoSave&quot;</span>).<span class=\"built_in\">toString</span>();</span><br /><span class=\"line\">  QString iniPath = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;filePath&quot;</span>).<span class=\"built_in\">toString</span>();</span><br /><span class=\"line\">  QString iniQss = iniRead-&gt;<span class=\"built_in\">value</span>(<span class=\"string\">&quot;globalQss&quot;</span>).<span class=\"built_in\">toString</span>();</span><br /><span class=\"line\">  <span class=\"keyword\">delete</span> iniRead;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"comment\">// init autoSave</span></span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (!iniAuto.<span class=\"built_in\">isEmpty</span>() &amp;&amp; !iniAuto.<span class=\"built_in\">toInt</span>()) &#123;</span><br /><span class=\"line\">    Location::autoSave = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    ui-&gt;actionAuto_Save-&gt;<span class=\"built_in\">setText</span>(<span class=\"string\">&quot;Auto Save Off&quot;</span>);</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"comment\">// init filePath</span></span><br /><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniPathFile</span><span class=\"params\">(iniPath)</span></span>;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (iniPathFile.<span class=\"built_in\">open</span>(QFile::WriteOnly)) &#123;</span><br /><span class=\"line\">    Location::filePath = iniPath;</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"comment\">// init Qss file(theme)</span></span><br /><span class=\"line\">  <span class=\"function\">QFile <span class=\"title\">iniQssFile</span><span class=\"params\">(iniQss)</span></span>;</span><br /><span class=\"line\">  QString qssContent;</span><br /><span class=\"line\">  <span class=\"keyword\">if</span> (iniQssFile.<span class=\"built_in\">open</span>(QFile::ReadOnly)) &#123;</span><br /><span class=\"line\">    qssContent = iniQssFile.<span class=\"built_in\">readAll</span>();</span><br /><span class=\"line\">    globalQss = iniQss;</span><br /><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br /><span class=\"line\">    QFile <span class=\"built_in\">defaultQss</span>(<span class=\"string\">&quot;:/Black.qss&quot;</span>);</span><br /><span class=\"line\">    defaultQss.<span class=\"built_in\">open</span>(QFile::ReadOnly);</span><br /><span class=\"line\">    qssContent = defaultQss.<span class=\"built_in\">readAll</span>();</span><br /><span class=\"line\">  &#125;</span><br /><span class=\"line\">  <span class=\"built_in\">centralWidget</span>()-&gt;<span class=\"built_in\">setStyleSheet</span>(qssContent);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\">MainWindow::~<span class=\"built_in\">MainWindow</span>() &#123;</span><br /><span class=\"line\">  QSettings *IniWrite = <span class=\"keyword\">new</span> <span class=\"built_in\">QSettings</span>(<span class=\"string\">&quot;config.ini&quot;</span>, QSettings::IniFormat);</span><br /><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;autoSave&quot;</span>, Location::autoSave);</span><br /><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;filePath&quot;</span>, Location::filePath);</span><br /><span class=\"line\">  IniWrite-&gt;<span class=\"built_in\">setValue</span>(<span class=\"string\">&quot;globalQss&quot;</span>, globalQss);</span><br /><span class=\"line\">  <span class=\"keyword\">delete</span> IniWrite;</span><br /><span class=\"line\"></span><br /><span class=\"line\">  <span class=\"keyword\">delete</span> ui;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /></pre></td></tr></table></figure><h2 id=\"其他\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#其他\" title=\"其他\"></a>其他</h2><ul><li>在主函数中为整个窗口设置了透明度，让它看起来酷炫一点点。</li><li>在主函数中为窗口设定名称。</li><li>在<code>.pro</code>文件中加入图标文件，使得生成的程序有图标</li></ul><h1 id=\"感想\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#感想\" title=\"感想\"></a>感想</h1><h2 id=\"收获\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#收获\" title=\"收获\"></a>收获</h2><ul><li>不再害怕qt框架了，反而觉得它好用。</li><li>qt的窗口类很舒服，有清晰且层次分明的关系，有足够好用的成员函数。</li><li>qt的基本库也有不少可以讨论的，如QString的设计，不仅提供了基本的可变长度和操作符重载，还考虑到了和std库之间的转换。</li><li>qt的信号与槽机制是qt最精髓的东西之一，信号是一种非常不错的线程间通信方式，很遗憾我没有手动使用connect函数来创建信号与槽。但确实在写qt的过程中，qtcreator已经为我提供了足够的可视化信号与槽构建工具。</li><li>qss基本等于css</li><li>qt以易于制作ui界面出名，但用了之后发现，qt实际上是借鉴了很多现代浏览器（前端）的实现方式。我写的时候感觉自己像是在写js+css。对于一个web项目来说，前端工程师书写html，css，以及利用框架来写js。后端工程师则使用各种工具来构建web服务。但对于qt这样一种前后结合的一体化程序设计框架来说，前后的分离并不彻底（虽然对硬件工程师来说可能会很友好）。</li><li>我还是支持“qt是一个平台而不只是一个ui框架”这种说法。qt在基本库中的内容一点也不比它在ui界面中的少。无论是基本库还是ui库，都有很多可以研究的东西。</li><li>宏的自动扩展确实好用</li><li>qt毕竟还是封装的比较高层了，要是需要一些简单的功能，还是老老实实写原生的c和std吧。</li></ul><h2 id=\"遗憾\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#遗憾\" title=\"遗憾\"></a>遗憾</h2><ul><li>大佬说他使用了前缀表达式，求余和翻方功能不好实现，我懂的算法也不多，这两个功能没能实现。只能说算法能力有待提高了。</li></ul>",
            "tags": [
                {
                    "term": "cpp",
                    "scheme": "https://kawhicurry.github.io/categories/cpp/",
                    "label": null
                },
                {
                    "term": "cpp",
                    "scheme": "https://kawhicurry.github.io/tags/cpp/",
                    "label": null
                }
            ]
        },
        {
            "title": "给Apollo的面对对象课",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "给Apollo的面对对象课"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/uncategorized/oop-for-apollo/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/uncategorized/oop-for-apollo/",
            "id": "https://kawhicurry.github.io/uncategorized/oop-for-apollo/",
            "guidislink": false,
            "published": "2021-11-21T11:21:13.000Z",
            "published_parsed": [
                2021,
                11,
                21,
                11,
                21,
                13,
                6,
                325,
                0
            ],
            "updated": "2021-12-19T09:49:41.021Z",
            "updated_parsed": [
                2021,
                12,
                19,
                9,
                49,
                41,
                6,
                353,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"课前提醒（给我自己的）\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#课前提醒（给我自己的）\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol><li>打开vscode，准备源码</li><li>准备好使用g++</li></ol><h1 id=\"多文件编程\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#多文件编程\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Why\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p><h2 id=\"How\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#How\" title=\"How\"></a>How</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//fun.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">std::cout&lt;&lt;<span class=\"string\">&quot;hello&quot;</span>&lt;&lt;std::endl;<span class=\"comment\">//?</span></span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br /><span class=\"line\"><span class=\"meta\">#inlcude <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br /><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hi\\n&quot;</span>);</span><br /><span class=\"line\"><span class=\"built_in\">func</span>();</span><br /><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p><p>VS（IDE）的编译过程：</p><ul><li>预处理</li><li>编译，生成中间可执行文件</li><li><strong>链接</strong></li><li>生成最终可执行文件</li></ul><hr /><p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p><hr /><p>更进一步：Make</p><p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _fun</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _fun</span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br /></pre></td></tr></table></figure><h1 id=\"面对对象\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#面对对象\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p><ol><li>面向过程：我让机器干啥就干啥</li><li>面向对象：以对象为中心，把问题分解成对象</li></ol><p><em>举例</em>：卖书</p><h2 id=\"C的对象\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#C的对象\" title=\"C的对象\"></a>C的对象</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">book</span>&#123;</span></span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> theBook-&gt;price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theBook-&gt;price);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：考虑一另一把剑🗡</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sword</span>&#123;</span></span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct sword* theSword)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> theSword-&gt;price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theSword)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theSword-&gt;price);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p><p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">theBook</span>=</span><span class=\"comment\">/*...*/</span>;</span><br /><span class=\"line\">theBook.<span class=\"built_in\">showPrice</span>();</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//考虑这种用法</span></span><br /><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        price=value;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"comment\">//还是没有解决问题，依然可以</span></span><br /><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br /></pre></td></tr></table></figure><p>封装的必要性</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        price=value;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//无法直接修改price，必须通过公共成员函数</span></span><br /></pre></td></tr></table></figure><h2 id=\"构造函数\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#构造函数\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">int</span> num;</span><br /><span class=\"line\">&#125;Book;</span><br /><span class=\"line\"></span><br /><span class=\"line\">Book b;</span><br /></pre></td></tr></table></figure><p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p><p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;&#125;</span><br /><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">setPrice</span>(the_price);&#125;</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br /><span class=\"line\">        <span class=\"built_in\">Book</span>(the_price,the_name,<span class=\"string\">&quot;0000&quot;</span>);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">10.0</span>,<span class=\"keyword\">char</span>* the_name=<span class=\"string\">&quot;none&quot;</span>,<span class=\"keyword\">char</span>* ISBN)&#123;</span><br /><span class=\"line\">        <span class=\"built_in\">setPrice</span>(the_price);</span><br /><span class=\"line\">        <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br /><span class=\"line\">        <span class=\"built_in\">memcpy</span>(ISBN,the_ISBN,<span class=\"number\">20</span>);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"></span><br /><span class=\"line\">Book b0;</span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b2</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br /></pre></td></tr></table></figure><p>参考：</p><ol><li>拷贝构造</li><li>移动构造</li><li>合成构造</li></ol><h2 id=\"继承与多态\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#继承与多态\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> depth;</span><br /><span class=\"line\">    <span class=\"keyword\">char</span>* person;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /></pre></td></tr></table></figure><p>有公共属性，也有独有的属性(attribute)</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fiction</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"built_in\">Fiction</span>();</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">10</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        price=value;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"comment\">//不用写，都继承过来了</span></span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">biography</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br /><span class=\"line\">  <span class=\"comment\">//现场要求写一个  </span></span><br /><span class=\"line\">&#125;;</span><br /></pre></td></tr></table></figure><p>继承的方式有三种：</p><blockquote><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p><p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul></blockquote><p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /></pre></td></tr></table></figure><p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p><h2 id=\"重载\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#重载\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br /><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;1&quot;</span> &lt;&lt; endl; &#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">char</span> b)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;2&quot;</span> &lt;&lt; endl; &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"number\">1</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//已经有了这个函数</span></span><br /><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br /><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br /><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"comment\">//又有了这个</span></span><br /><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_ISBN)&#123;</span><br /><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br /><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_ISBN,<span class=\"number\">10</span>);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b3</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br /><span class=\"line\"><span class=\"comment\">//Apollo 会变成name还是ISBN？</span></span><br /></pre></td></tr></table></figure><p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p><p>更进一步，考虑Book==Book</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Book <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//a.equal(b);</span></span><br /><span class=\"line\"><span class=\"keyword\">if</span>(a==b)&#123;&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Book) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;name == Book::name)</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">else</span></span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"><span class=\"comment\">//写一个重载+，当两本书相同时，价格相加</span></span><br /></pre></td></tr></table></figure><h2 id=\"析构函数\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#析构函数\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p><h2 id=\"两种风格的对象\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#两种风格的对象\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul><li>使这个对象像个“东西”，示例如上</li><li>使这个对象像个“指针”，先看看内存管理</li></ul><h1 id=\"内存管理\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#内存管理\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p><blockquote><p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p><p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p><p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p><p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p><p><strong>程序代码区：</strong>存放源程序的二进制代码。</p></blockquote><p><strong>提问</strong>：如何创建一个长度不定的数组</p><p>错误示范：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> arr[N] = &#123; <span class=\"number\">0</span> &#125;;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>正确示范：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br /><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h2 id=\"手动内存管理\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#手动内存管理\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span>* arr;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    arr = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br /><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">free</span>(arr);</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>C++ 使用封装好的new 和delete</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    cin&lt;&lt;N;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> *arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br /><span class=\"line\"></span><br /><span class=\"line\">    cin&lt;&lt;<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>&lt;&lt;endl;</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br /><span class=\"line\">        cin&lt;&lt; arr[i]);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">delete</span>[] p;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p> <strong>提问</strong>：为什么不是delete p?</p><h2 id=\"内存泄漏\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#内存泄漏\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p><p><em>share_ptr</em> 的原理：对指针进行计数</p><h1 id=\"使用STL库\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#使用STL库\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#String\" title=\"String\"></a>String</h2><ul><li>创建string</li><li>string+</li><li>insert</li><li>substr</li></ul><h2 id=\"Vector\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Vector\" title=\"Vector\"></a>Vector</h2><ul><li>创建vector</li><li>size</li><li>begin</li><li>end</li><li>resize</li></ul><h2 id=\"Algorithm\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Algorithm\" title=\"Algorithm\"></a>Algorithm</h2><ul><li>find</li><li>rotate</li><li>sort</li><li>min</li><li>max</li></ul><h2 id=\"Utility\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Utility\" title=\"Utility\"></a>Utility</h2><ul><li>swap</li><li>pari</li><li>tuple</li></ul><h1 id=\"完整示例\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#完整示例\" title=\"完整示例\"></a>完整示例</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _book</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _book</span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;show.hpp&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;<span class=\"built_in\">init</span>();&#125;;</span><br /><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price);</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(std::string the_name)=<span class=\"keyword\">delete</span>;</span><br /><span class=\"line\">    <span class=\"comment\">//Book(double the_price,std::string the_name);</span></span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string ISBN);</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(Book);</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(Book b);</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_price</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_name</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_ISBN</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book)</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    std::string name;</span><br /><span class=\"line\">    std::string ISBN;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string ISBN=<span class=\"string\">&quot;&quot;</span>)</span></span>;</span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br /></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.h&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">Book</span>()&#125;</span><br /><span class=\"line\"><span class=\"comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,&quot;&quot;)&#123;&#125;</span></span><br /><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string the_ISBN=<span class=\"string\">&quot;&quot;</span>)&#123;</span><br /><span class=\"line\">    Book::<span class=\"built_in\">init</span>(the_price,the_name,the_ISBN);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">Book::<span class=\"built_in\">Book</span>(Book the_book)&#123;&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string the_ISBN)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">set_price</span>(the_price) &amp;&amp; <span class=\"built_in\">set_name</span>(the_name) &amp;&amp; <span class=\"built_in\">set_ISBN</span>(the_ISBN);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::set_price</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(the_price&gt;=<span class=\"number\">0</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;price=the_price;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"comment\">//set_name 和 set_ISBN 略</span></span><br /></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//show.hpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book the_book)</span></span>&#123;</span><br /><span class=\"line\">    std::cout&lt;&lt;the_book.price&lt;&lt;std::endl;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.hpp&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    Book b;</span><br /><span class=\"line\">    b.<span class=\"built_in\">set_price</span>(<span class=\"number\">10</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">show_price</span>(b);</span><br /><span class=\"line\">    <span class=\"function\">Book <span class=\"title\">bb</span><span class=\"params\">(b)</span></span>;</span><br /><span class=\"line\">    <span class=\"comment\">//Book bb=b;</span></span><br /><span class=\"line\">    <span class=\"comment\">//Book bb&#123;b&#125;;</span></span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h1 id=\"Apollo2D\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Apollo2D\" title=\"Apollo2D\"></a>Apollo2D</h1><p>//这里是Agent2d中的WorldModel</p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"课前提醒（给我自己的）\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#课前提醒（给我自己的）\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol>\n<li>打开vscode，准备源码</li>\n<li>准备好使用"
                }
            ],
            "summary": "<h1 id=\"课前提醒（给我自己的）\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#课前提醒（给我自己的）\" title=\"课前提醒（给我自己的）\"></a>课前提醒（给我自己的）</h1><ol><li>打开vscode，准备源码</li><li>准备好使用g++</li></ol><h1 id=\"多文件编程\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#多文件编程\" title=\"多文件编程\"></a>多文件编程</h1><h2 id=\"Why\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Why\" title=\"Why\"></a>Why</h2><p>非结构化与结构化：<code>goto</code>满天飞的后果</p><h2 id=\"How\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#How\" title=\"How\"></a>How</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//fun.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">std::cout&lt;&lt;<span class=\"string\">&quot;hello&quot;</span>&lt;&lt;std::endl;<span class=\"comment\">//?</span></span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br /><span class=\"line\"><span class=\"meta\">#inlcude <span class=\"meta-string\">&quot;fun.h&quot;</span></span></span><br /><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;hi\\n&quot;</span>);</span><br /><span class=\"line\"><span class=\"built_in\">func</span>();</span><br /><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：<code>iostream</code>头文件应该放在哪？</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：<code>main.cpp</code> 如何找到func()的实现？</p><p>VS（IDE）的编译过程：</p><ul><li>预处理</li><li>编译，生成中间可执行文件</li><li><strong>链接</strong></li><li>生成最终可执行文件</li></ul><hr /><p>演示：<a href=\"https://zhuanlan.zhihu.com/p/106781089\">https://zhuanlan.zhihu.com/p/106781089</a></p><hr /><p>更进一步：Make</p><p><strong>提问</strong>：如果把上面的<code>stdio.h</code>改成<code>iostream</code>，会怎么样</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//fun.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _fun</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _fun</span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br /></pre></td></tr></table></figure><h1 id=\"面对对象\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#面对对象\" title=\"面对对象\"></a>面对对象</h1><p><strong>提问</strong>：计算机是用来干啥的？为何计算机今天能为我们带来如此多好处？一个词语，两个汉字。</p><ol><li>面向过程：我让机器干啥就干啥</li><li>面向对象：以对象为中心，把问题分解成对象</li></ol><p><em>举例</em>：卖书</p><h2 id=\"C的对象\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#C的对象\" title=\"C的对象\"></a>C的对象</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">book</span>&#123;</span></span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> theBook-&gt;price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theBook)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theBook-&gt;price);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：考虑一另一把剑🗡</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sword</span>&#123;</span></span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">(struct sword* theSword)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> theSword-&gt;price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">(struct book* theSword)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,theSword-&gt;price);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>C不允许同名函数，即使允许，你也不知道show了谁的price。如何解决这个问题？（其实可以同名，在后面的重载会讲到）</p><p>把函数写在struct里面，让函数成为struct的“专属函数”。C不许我们这么做，但是C++可以</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Book</span> <span class=\"title\">theBook</span>=</span><span class=\"comment\">/*...*/</span>;</span><br /><span class=\"line\">theBook.<span class=\"built_in\">showPrice</span>();</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：考虑price的合理性，如何正确的为price赋值？（price&gt;0)</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//考虑这种用法</span></span><br /><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        price=value;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"comment\">//还是没有解决问题，依然可以</span></span><br /><span class=\"line\">theBook.price=<span class=\"number\">100</span>;</span><br /></pre></td></tr></table></figure><p>封装的必要性</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">0</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        price=value;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">getPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> price;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showPrice</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf&quot;</span>,price);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//无法直接修改price，必须通过公共成员函数</span></span><br /></pre></td></tr></table></figure><h2 id=\"构造函数\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#构造函数\" title=\"构造函数\"></a>构造函数</h2><p>C中的<code>struct</code>如何创建对象？</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">int</span> num;</span><br /><span class=\"line\">&#125;Book;</span><br /><span class=\"line\"></span><br /><span class=\"line\">Book b;</span><br /></pre></td></tr></table></figure><p>考虑 <code>int a=1</code>，我们能不能<code>Book b</code>？</p><p>我们可以如何创建一个对象？我们需要Constructor，构造函数。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;&#125;</span><br /><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">setPrice</span>(the_price);&#125;</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br /><span class=\"line\">        <span class=\"built_in\">Book</span>(the_price,the_name,<span class=\"string\">&quot;0000&quot;</span>);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">10.0</span>,<span class=\"keyword\">char</span>* the_name=<span class=\"string\">&quot;none&quot;</span>,<span class=\"keyword\">char</span>* ISBN)&#123;</span><br /><span class=\"line\">        <span class=\"built_in\">setPrice</span>(the_price);</span><br /><span class=\"line\">        <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br /><span class=\"line\">        <span class=\"built_in\">memcpy</span>(ISBN,the_ISBN,<span class=\"number\">20</span>);</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"></span><br /><span class=\"line\">Book b0;</span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b1</span><span class=\"params\">(<span class=\"number\">10</span>)</span></span>;</span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b2</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br /></pre></td></tr></table></figure><p>参考：</p><ol><li>拷贝构造</li><li>移动构造</li><li>合成构造</li></ol><h2 id=\"继承与多态\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#继承与多态\" title=\"继承与多态\"></a>继承与多态</h2><p><strong>提问</strong>：我希望有一个科幻书，科幻书有一个别人没有的成员：科幻程度(depth)。同时有一种传记，有一个独有的值来记录传记主人公的名字(person)。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> depth;</span><br /><span class=\"line\">    <span class=\"keyword\">char</span>* person;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /></pre></td></tr></table></figure><p>有公共属性，也有独有的属性(attribute)</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fiction</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"built_in\">Fiction</span>();</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(value&lt;<span class=\"number\">10</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        price=value;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"comment\">//不用写，都继承过来了</span></span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">biography</span>:</span><span class=\"keyword\">public</span> Book&#123;</span><br /><span class=\"line\">  <span class=\"comment\">//现场要求写一个  </span></span><br /><span class=\"line\">&#125;;</span><br /></pre></td></tr></table></figure><p>继承的方式有三种：</p><blockquote><p>当一个类派生自基类，该基类可以被继承为 <strong>public、protected</strong> 或 <strong>private</strong> 几种类型。继承类型是通过上面讲解的访问修饰符 access-specifier 来指定的。</p><p>我们几乎不使用 <strong>protected</strong> 或 <strong>private</strong> 继承，通常使用 <strong>public</strong> 继承。当使用不同类型的继承时，遵循以下几个规则：</p><ul><li><strong>公有继承（public）：</strong>当一个类派生自<strong>公有</strong>基类时，基类的<strong>公有</strong>成员也是派生类的<strong>公有</strong>成员，基类的<strong>保护</strong>成员也是派生类的<strong>保护</strong>成员，基类的<strong>私有</strong>成员不能直接被派生类访问，但是可以通过调用基类的<strong>公有</strong>和<strong>保护</strong>成员来访问。</li><li><strong>保护继承（protected）：</strong> 当一个类派生自<strong>保护</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>保护</strong>成员。</li><li><strong>私有继承（private）：</strong>当一个类派生自<strong>私有</strong>基类时，基类的<strong>公有</strong>和<strong>保护</strong>成员将成为派生类的<strong>私有</strong>成员。</li></ul></blockquote><p>现在，我希望所有书都是被分了类的（如果不知道怎么分，就分到“未知分类”里面去），我们现在不允许直接创建一个Book对象，必须要先从Book继承一个专门的分类，再创建该分类的对象。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"title\">Book</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">setPrice</span><span class=\"params\">(<span class=\"keyword\">double</span> value)</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /></pre></td></tr></table></figure><p><code>virtual</code>意味着必须由子类来实现这些函数。这叫纯虚函数，关于virtual，还有更多用法。</p><h2 id=\"重载\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#重载\" title=\"重载\"></a>重载</h2><p><code>virtual</code>要求必须由子类来实现，这就是重载。重载允许同名，但必须接受不同参数。</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br /><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;1&quot;</span> &lt;&lt; endl; &#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">char</span> b)</span> </span>&#123; cout &lt;&lt; <span class=\"string\">&quot;2&quot;</span> &lt;&lt; endl; &#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br /><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"number\">1</span>);</span><br /><span class=\"line\">  <span class=\"built_in\">func</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p><strong>提问</strong>：</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//已经有了这个函数</span></span><br /><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_name)&#123;</span><br /><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br /><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_name,<span class=\"number\">10</span>);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"comment\">//又有了这个</span></span><br /><span class=\"line\"><span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,<span class=\"keyword\">char</span>* the_ISBN)&#123;</span><br /><span class=\"line\">   <span class=\"built_in\">setPrice</span>(the_price);</span><br /><span class=\"line\">   <span class=\"built_in\">memcpy</span>(name,the_ISBN,<span class=\"number\">10</span>);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b3</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;Apollo&quot;</span>)</span></span>;</span><br /><span class=\"line\"><span class=\"comment\">//Apollo 会变成name还是ISBN？</span></span><br /></pre></td></tr></table></figure><p>C++编译器不允许这样的事情发生，会出现redefinition报错，编译器认为这两个是同一函数。因此，参数的类型应该有所区别。</p><p>更进一步，考虑Book==Book</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Book <span class=\"title\">a</span><span class=\"params\">(<span class=\"number\">1</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br /><span class=\"line\"><span class=\"function\">Book <span class=\"title\">b</span><span class=\"params\">(<span class=\"number\">10</span>,<span class=\"string\">&quot;apollo&quot;</span>)</span></span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"comment\">//a.equal(b);</span></span><br /><span class=\"line\"><span class=\"keyword\">if</span>(a==b)&#123;&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>==(<span class=\"keyword\">const</span> Book) &#123;</span><br /><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>-&gt;name == Book::name)</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br /><span class=\"line\">      <span class=\"keyword\">else</span></span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">char</span> ISBN[<span class=\"number\">20</span>];</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    <span class=\"comment\">//...</span></span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"><span class=\"comment\">//写一个重载+，当两本书相同时，价格相加</span></span><br /></pre></td></tr></table></figure><h2 id=\"析构函数\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#析构函数\" title=\"析构函数\"></a>析构函数</h2><p>一个对象创建完成后，也要销毁，我们应当定义它如何被销毁。</p><h2 id=\"两种风格的对象\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#两种风格的对象\" title=\"两种风格的对象\"></a>两种风格的对象</h2><ul><li>使这个对象像个“东西”，示例如上</li><li>使这个对象像个“指针”，先看看内存管理</li></ul><h1 id=\"内存管理\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#内存管理\" title=\"内存管理\"></a>内存管理</h1><p><strong>提问</strong>：a+b中的内存是如何分配的？</p><blockquote><p><strong>栈区（stack）：</strong>指那些由编译器在需要的时候分配，不需要时自动清除的变量所在的储存区，如函数执行时，函数的形参以及函数内的局部变量分配在栈区，函数运行结束后，形参和局部变量去栈（自动释放）。栈内存分配运算内置与处理器的指令集中，效率高但是分配的内存空间有限。</p><p><strong>堆区（heap）：</strong>指哪些由程序员手动分配释放的储存区，如果程序员不释放这块内存，内存将一直被占用，直到程序运行结束由系统自动收回，c语言中使用malloc，free申请和释放空间。</p><p><strong>静态储存区（static）：</strong>全局变量和静态变量的储存是放在一块的，其中初始化的全局变量和静态变量在一个区域，这块空间当程序运行结束后由系统释放。</p><p><strong>常量储存区（const）：</strong>常量字符串就是储存在这里的，如“ABC”字符串就储存在常量区，储存在常量区的只读不可写。const修饰的全局变量也储存在常量区，const修饰的局部变量依然在栈上。</p><p><strong>程序代码区：</strong>存放源程序的二进制代码。</p></blockquote><p><strong>提问</strong>：如何创建一个长度不定的数组</p><p>错误示范：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> arr[N] = &#123; <span class=\"number\">0</span> &#125;;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>正确示范：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">1000</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br /><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h2 id=\"手动内存管理\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#手动内存管理\" title=\"手动内存管理\"></a>手动内存管理</h2><p>C 使用malloc 分配内存和 free释放内存。</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span>* arr;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;N);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    arr = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * N);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>, N);</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br /><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;arr[i]);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">free</span>(arr);</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p>C++ 使用封装好的new 和delete</p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br /><span class=\"line\">    <span class=\"keyword\">int</span> N = <span class=\"number\">0</span>;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入数组的大小\\n&quot;</span>);</span><br /><span class=\"line\">    cin&lt;&lt;N;</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">int</span> *arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[N];</span><br /><span class=\"line\"></span><br /><span class=\"line\">    cin&lt;&lt;<span class=\"string\">&quot;请输入%d个数\\n&quot;</span>&lt;&lt;endl;</span><br /><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; N; i++)</span><br /><span class=\"line\">        cin&lt;&lt; arr[i]);</span><br /><span class=\"line\"></span><br /><span class=\"line\">    <span class=\"keyword\">delete</span>[] p;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><p> <strong>提问</strong>：为什么不是delete p?</p><h2 id=\"内存泄漏\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#内存泄漏\" title=\"内存泄漏\"></a>内存泄漏</h2><p>画图</p><p><em>share_ptr</em> 的原理：对指针进行计数</p><h1 id=\"使用STL库\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#使用STL库\" title=\"使用STL库\"></a>使用STL库</h1><h2 id=\"String\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#String\" title=\"String\"></a>String</h2><ul><li>创建string</li><li>string+</li><li>insert</li><li>substr</li></ul><h2 id=\"Vector\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Vector\" title=\"Vector\"></a>Vector</h2><ul><li>创建vector</li><li>size</li><li>begin</li><li>end</li><li>resize</li></ul><h2 id=\"Algorithm\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Algorithm\" title=\"Algorithm\"></a>Algorithm</h2><ul><li>find</li><li>rotate</li><li>sort</li><li>min</li><li>max</li></ul><h2 id=\"Utility\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Utility\" title=\"Utility\"></a>Utility</h2><ul><li>swap</li><li>pari</li><li>tuple</li></ul><h1 id=\"完整示例\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#完整示例\" title=\"完整示例\"></a>完整示例</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /><span class=\"line\">23</span><br /><span class=\"line\">24</span><br /><span class=\"line\">25</span><br /><span class=\"line\">26</span><br /><span class=\"line\">27</span><br /><span class=\"line\">28</span><br /><span class=\"line\">29</span><br /><span class=\"line\">30</span><br /><span class=\"line\">31</span><br /><span class=\"line\">32</span><br /><span class=\"line\">33</span><br /><span class=\"line\">34</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.h</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _book</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _book</span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;show.hpp&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span>&#123;</span></span><br /><span class=\"line\"><span class=\"keyword\">public</span>:</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>()&#123;<span class=\"built_in\">init</span>();&#125;;</span><br /><span class=\"line\">    <span class=\"comment\">//Book(double the_price):price(the_price)&#123;&#125;</span></span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price);</span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(std::string the_name)=<span class=\"keyword\">delete</span>;</span><br /><span class=\"line\">    <span class=\"comment\">//Book(double the_price,std::string the_name);</span></span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string ISBN);</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(Book);</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"built_in\">Book</span>(Book b);</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_price</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_name</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">set_ISBN</span><span class=\"params\">()</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">friend</span> <span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book)</span></span>;</span><br /><span class=\"line\">    </span><br /><span class=\"line\"><span class=\"keyword\">private</span>:</span><br /><span class=\"line\">    <span class=\"keyword\">double</span> price;</span><br /><span class=\"line\">    std::string name;</span><br /><span class=\"line\">    std::string ISBN;</span><br /><span class=\"line\">    </span><br /><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string ISBN=<span class=\"string\">&quot;&quot;</span>)</span></span>;</span><br /><span class=\"line\">&#125;;</span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br /></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /><span class=\"line\">22</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//book.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.h&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price)&#123;<span class=\"built_in\">Book</span>()&#125;</span><br /><span class=\"line\"><span class=\"comment\">//Book::Book(double the_price=0,std::string the_name):Book(the_price,the_name,&quot;&quot;)&#123;&#125;</span></span><br /><span class=\"line\">Book::<span class=\"built_in\">Book</span>(<span class=\"keyword\">double</span> the_price=<span class=\"number\">0</span>,std::string the_name=<span class=\"string\">&quot;&quot;</span>,std::string the_ISBN=<span class=\"string\">&quot;&quot;</span>)&#123;</span><br /><span class=\"line\">    Book::<span class=\"built_in\">init</span>(the_price,the_name,the_ISBN);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">Book::<span class=\"built_in\">Book</span>(Book the_book)&#123;&#125;</span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::init</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price,std::string the_name,std::string the_ISBN)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">set_price</span>(the_price) &amp;&amp; <span class=\"built_in\">set_name</span>(the_name) &amp;&amp; <span class=\"built_in\">set_ISBN</span>(the_ISBN);</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Book::set_price</span><span class=\"params\">(<span class=\"keyword\">double</span> the_price)</span></span>&#123;</span><br /><span class=\"line\">    <span class=\"keyword\">if</span>(the_price&gt;=<span class=\"number\">0</span>)&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;price=the_price;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br /><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br /><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br /><span class=\"line\">    &#125;</span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\"><span class=\"comment\">//set_name 和 set_ISBN 略</span></span><br /></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//show.hpp</span></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">show_price</span><span class=\"params\">(Book the_book)</span></span>&#123;</span><br /><span class=\"line\">    std::cout&lt;&lt;the_book.price&lt;&lt;std::endl;</span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.cpp</span></span><br /><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;book.hpp&quot;</span></span></span><br /><span class=\"line\"></span><br /><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br /><span class=\"line\">    Book b;</span><br /><span class=\"line\">    b.<span class=\"built_in\">set_price</span>(<span class=\"number\">10</span>);</span><br /><span class=\"line\">    <span class=\"built_in\">show_price</span>(b);</span><br /><span class=\"line\">    <span class=\"function\">Book <span class=\"title\">bb</span><span class=\"params\">(b)</span></span>;</span><br /><span class=\"line\">    <span class=\"comment\">//Book bb=b;</span></span><br /><span class=\"line\">    <span class=\"comment\">//Book bb&#123;b&#125;;</span></span><br /><span class=\"line\">&#125;</span><br /></pre></td></tr></table></figure><h1 id=\"Apollo2D\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Apollo2D\" title=\"Apollo2D\"></a>Apollo2D</h1><p>//这里是Agent2d中的WorldModel</p>",
            "tags": [
                {
                    "term": "uncategorized",
                    "scheme": "https://kawhicurry.github.io/categories/uncategorized/",
                    "label": null
                },
                {
                    "term": "cpp",
                    "scheme": "https://kawhicurry.github.io/tags/cpp/",
                    "label": null
                }
            ]
        },
        {
            "title": "记录从无人机上学到的东西",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "记录从无人机上学到的东西"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/auto/uav/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/auto/uav/",
            "id": "https://kawhicurry.github.io/auto/uav/",
            "guidislink": false,
            "published": "2021-11-16T12:54:45.000Z",
            "published_parsed": [
                2021,
                11,
                16,
                12,
                54,
                45,
                1,
                320,
                0
            ],
            "updated": "2021-12-19T10:57:14.443Z",
            "updated_parsed": [
                2021,
                12,
                19,
                10,
                57,
                14,
                6,
                353,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"记录从无人机上学到的东西\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#记录从无人机上学到的东西\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p><h2 id=\"项目的目的\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#项目的目的\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p><h2 id=\"数传通信\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#数传通信\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p><p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p><p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p><p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p><p>再记录一下硬件的问题：</p><ol><li>电调插反了，折磨了搞硬件的兄弟一下午</li><li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li><li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li><li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li></ol>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"记录从无人机上学到的东西\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#记录从无人机上学到的东西\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial"
                }
            ],
            "summary": "<h1 id=\"记录从无人机上学到的东西\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#记录从无人机上学到的东西\" title=\"记录从无人机上学到的东西\"></a>记录从无人机上学到的东西</h1><p><em>UAV</em>: Unmanned Aerial Vehicle</p><h2 id=\"项目的目的\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#项目的目的\" title=\"项目的目的\"></a>项目的目的</h2><p>分为森林救火和森林巡逻，我被分在森林巡逻部分。主要是让飞机按一定轨迹在操场上飞行，以z形路线飞过一个操场。森姐救火则是在上述基础上加上使用视觉识别找到一个红色的正方形。我在该小组中负责通信部分。</p><h2 id=\"数传通信\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#数传通信\" title=\"数传通信\"></a>数传通信</h2><p>主要的任务是将无人机的xyz及三个偏转角通过数传发到地面站，地面站方面会有同学根据数据进行3d绘图。</p><p>一开始读代码思路不对，一心想着找gps的数据，于是找到了Sensor，通过将整个sensor的数据取出来，然后获取其中的数据。后来发现库里有个MeasureSystem，可以直接获取xyz及偏转角。于是改写为直接调取。</p><p>获取数据后就是发送，发送是利用飞控的Uart与数传进行连接。库中提供了Uart_Send函数，接受一个数组和一个长度作为参数，但是该数组只接受字符，因此要将实际数据转为字符后再发送，思路是将 原始数据%10+‘0’ 从而得到其ascii码值，同时用switch来遍历xyz和三个偏转角。每6个数据作为一组，一组中的数据之间使用‘，’分割，不同组之间使用‘@’分割。期间对原数据进行处理时要记得将得到的某个数据进行数组反转（再看一眼上面对原始数据处理的思路），因为这个问题还出过bug……。</p><p>再具体一点，原始数据都是double 或者 float类型，单位都为厘米。一开始我在将获取的数据传到中间的handler时，将其转为（int），然后再直接处理，后面我在转为（int）前，让原始数据的右值*PRESION，设定一个精度，精度取100，从而获得了0.1mm级别的精度。但后面发现这个精度的意义不大了，于是又改回了1。</p><p>再记录一下硬件的问题：</p><ol><li>电调插反了，折磨了搞硬件的兄弟一下午</li><li>图传始终没有图像，一直以为是电源线的问题，后面发现是插在电脑上的输入线没有插稳</li><li>飞到一半炸机了，排查半天发现是当时调试的太久，没有注意到电量。</li><li>几乎相同的坐标发送代码（除了版本问题外，对数据处理的方式相同）在A9上正常运行，在TI上发出的数据是乱码，改用发送固定值之后，电脑端收到了稳定的乱码。更换数传和数传连接线之后问题仍然存在。直到写下此文时依然未解决。</li></ol>",
            "tags": [
                {
                    "term": "auto",
                    "scheme": "https://kawhicurry.github.io/categories/auto/",
                    "label": null
                },
                {
                    "term": "auto",
                    "scheme": "https://kawhicurry.github.io/tags/auto/",
                    "label": null
                }
            ]
        },
        {
            "title": "Situation of operation technology",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "Situation of operation technology"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/operation/net-server-0/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/operation/net-server-0/",
            "id": "https://kawhicurry.github.io/operation/net-server-0/",
            "guidislink": false,
            "published": "2021-11-13T12:01:01.000Z",
            "published_parsed": [
                2021,
                11,
                13,
                12,
                1,
                1,
                5,
                317,
                0
            ],
            "updated": "2021-11-14T01:56:56.035Z",
            "updated_parsed": [
                2021,
                11,
                14,
                1,
                56,
                56,
                6,
                318,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"一个软件的诞生\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#一个软件的诞生\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#开发过程\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p><p>确定方案：技术，平台</p><p>开发：</p><ul><li>设计&amp;前端：界面</li><li>后端：业务逻辑</li></ul><p>上线：</p><ul><li>运营：宣传</li><li>运维：服务器维护</li></ul><h1 id=\"传统的运维方式\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#传统的运维方式\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p><h2 id=\"如果业务量大了呢？\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#如果业务量大了呢？\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p><h2 id=\"有什么问题？\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#有什么问题？\" title=\"有什么问题？\"></a>有什么问题？</h2><ul><li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li><li>每个公司都要有专职运维人员，招人难</li><li>运维人员无论水平高低，所能管理的服务器数量有上限</li><li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li></ul><h1 id=\"一种趋势\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#一种趋势\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p><h2 id=\"CI-CD\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#CI-CD\" title=\"CI/CD\"></a>CI/CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p><h2 id=\"Devops\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Devops\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p><h1 id=\"另一种趋势\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#另一种趋势\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#虚拟化技术的进步\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p><p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p><h2 id=\"容器时代\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#容器时代\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p><p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p><p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p><h2 id=\"容器编排\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#容器编排\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p><p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p><p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p><p>即成事实：<strong>k8s是生态的中心</strong></p><p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p><p><em>k8s标志着云时代的正式开始</em></p><h2 id=\"再进一步\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#再进一步\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p><p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p><p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p><p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p><h1 id=\"云服务现状\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#云服务现状\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p><h2 id=\"国内环境\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#国内环境\" title=\"国内环境\"></a>国内环境</h2><ul><li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li><li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li><li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li><li>七牛云：阿里云出走大佬创办，有一定实力。</li><li>青云：一个k8s开源集群管理系统的国内主导者。</li></ul><p>现状分析：</p><blockquote><p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p></blockquote><h1 id=\"一些其他的机会\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#一些其他的机会\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#云与AI\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p><h2 id=\"云与物联网\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#云与物联网\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p><p>这就是我对这个行业的一些了解。</p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"一个软件的诞生\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#一个软件的诞生\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a href=\"#开发过程\" class=\"headerlink\" titl"
                }
            ],
            "summary": "<h1 id=\"一个软件的诞生\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#一个软件的诞生\" title=\"一个软件的诞生\"></a>一个软件的诞生</h1><h2 id=\"开发过程\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#开发过程\" title=\"开发过程\"></a>开发过程</h2><p>准备：市场调查、需求分析……</p><p>确定方案：技术，平台</p><p>开发：</p><ul><li>设计&amp;前端：界面</li><li>后端：业务逻辑</li></ul><p>上线：</p><ul><li>运营：宣传</li><li>运维：服务器维护</li></ul><h1 id=\"传统的运维方式\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#传统的运维方式\" title=\"传统的运维方式\"></a>传统的运维方式</h1><p>把写好的软件部署到服务器上，跑就完事了。</p><h2 id=\"如果业务量大了呢？\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#如果业务量大了呢？\" title=\"如果业务量大了呢？\"></a>如果业务量大了呢？</h2><p>用一样的方式部署到很多服务器上，跑就完事了。</p><h2 id=\"有什么问题？\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#有什么问题？\" title=\"有什么问题？\"></a>有什么问题？</h2><ul><li><strong>必须时刻以最大业务量安排服务器数量</strong>，成本高。</li><li>每个公司都要有专职运维人员，招人难</li><li>运维人员无论水平高低，所能管理的服务器数量有上限</li><li>遇到突发状况，所需运维人员数量陡增，而保持一个大量运维团队需要高成本</li></ul><h1 id=\"一种趋势\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#一种趋势\" title=\"一种趋势\"></a>一种趋势</h1><p>所需管理的服务器数量庞大，但大部分工作都是重复的。所以……</p><h2 id=\"CI-CD\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#CI-CD\" title=\"CI/CD\"></a>CI/CD</h2><p>持续集成，持续交付，持续部署。让后端开发人员（数量庞大，不乏牛人）来完成运维工作</p><h2 id=\"Devops\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Devops\" title=\"Devops\"></a>Devops</h2><p>运维开发，专门开发运维工具的人。试图将运维工作尽可能的自动化。</p><h1 id=\"另一种趋势\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#另一种趋势\" title=\"另一种趋势\"></a>另一种趋势</h1><h2 id=\"虚拟化技术的进步\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#虚拟化技术的进步\" title=\"虚拟化技术的进步\"></a>虚拟化技术的进步</h2><p>最初的虚拟化：让windows的应用在mac上跑起来（纯举例），虚拟化的环境具有完整的系统，可以在另一个操作系统上跑起来。在性能上具有极大的开销（就是会很慢）</p><p>容器化：让一个应用在一个容器中运行，该容器具有该应用所需的全部环境。一个容器就是一个进程，开销较小，与操作系统兼容良好（主要指linux）</p><h2 id=\"容器时代\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#容器时代\" title=\"容器时代\"></a>容器时代</h2><p>不再关注各式各样的环境问题，所需要的环境都可以打包成容器，并且可以使用别人打包好的容器。</p><p><strong>docker</strong>:第一个开源容器技术的公司，现在仍然是王者。</p><p>docker的开源使得任何人都可以轻松部署各式各样的服务，因为环境的配置已经不是难题。但是对于企业来说，问题仍然存在：每个服务器上都可以跑好几个容器，就像以前一个服务器上可以跑好几个应用一样。如果有几千台呢？几万台呢？</p><h2 id=\"容器编排\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#容器编排\" title=\"容器编排\"></a>容器编排</h2><p>能不能让不同的服务器上的容器连成一个整体？或者自动编排容器，让它们在合适的时间或者位置提供服务？</p><p><strong>kubernetes</strong>:来自google，简称k8s，容器编排唯一的标准，生态的中心。</p><p>允许将多个提供同一服务的容器打包成一个pod（豆荚），将多个服务器设置为一个cluster（集群），由k8s来决定pod在哪台服务器上运行。并且k8s可以在不同服务器上启动相同的pod，当一台服务器出现故障时，k8s迅速在其他服务器上添加故障服务器上运行的pod，从而保证了服务的稳定性。</p><p>即成事实：<strong>k8s是生态的中心</strong></p><p>围绕k8s的生态：监控，流水线部署，自动预警，网格化网关，容器化数据库以及<strong>serverless</strong></p><p><em>k8s标志着云时代的正式开始</em></p><h2 id=\"再进一步\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#再进一步\" title=\"再进一步\"></a>再进一步</h2><p>如果容器可以方便的创建和销毁，能不能更进一步？</p><p>当有请求时才创建容器进行服务（而不是一直等着），请求结束就销毁容器，这便是<strong>Serverless</strong>，来自Amazon（亚马逊）</p><p><strong>Serverless</strong>，无服务器技术，只有有需求的时候才服务。</p><p>试想一个秒杀系统，在短暂的几秒内，服务器收到了数以亿记的请求，服务器立刻反应，创建大量容器进行服务，每服务完就立即销毁，把资源留给下一个创建的容器。而在几秒前或几秒后，服务器也许还处于一个“清闲”的状态。当前的serverless按照请求数计费，小公司无需按最大并发量购置服务器，只需直接购买serverless服务。</p><h1 id=\"云服务现状\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#云服务现状\" title=\"云服务现状\"></a>云服务现状</h1><p>自k8s被推出以后，大公司们成立了CNCF（云原生计算基金会）。示例成员：google、AWS（亚马逊，世界最大的云服务供应商，serverless的领头羊）、RedHat（红帽，世界上最大的服务器软件公司，负责的centos操作系统跑在世界上百分之五十以上，中国百分之八十以上的服务器上）、docker、apache基金会（最成熟的服务器软件apache拥有者）、github、gitlab（二者分别为最大的代码托管网站和最大的开源私有git服务提供商）、华为（独立的鲲鹏架构）。</p><h2 id=\"国内环境\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#国内环境\" title=\"国内环境\"></a>国内环境</h2><ul><li>阿里云：全国最大的云服务供应商，对内为淘宝等提供服务，对外为各类企业提供云服务。</li><li>腾讯云：对内有qq、微信、微信小程序等业务。拥有独立的小程序平台。</li><li>华为云：有自产鲲鹏服务器，使用与绝大多数服务器不一样的arm架构（大部分服务器包括个人电脑都是amd64，也叫x86-64，但苹果的自研芯片M1是arm）。</li><li>七牛云：阿里云出走大佬创办，有一定实力。</li><li>青云：一个k8s开源集群管理系统的国内主导者。</li></ul><p>现状分析：</p><blockquote><p>一方面，围绕容器和容器编排的标准已经制定完成，但基于标准的各项指标仍有提升空间，各大公司仍然在试图在这些标准下做出更好的工具，比如容器和容器的构建工具。另一方面，围绕生态的工具也有许多不完善之处，比如一个让不懂运维的人也能轻松部署的自动部署平台，或是一个完善的部署到监控的工具链。这些被统称为“云基础设施”，云基础设施仍然有许多待完善之处。对于互联网行业来说，传统的运维会越来越少（但绝对不会消失），更多企业倾向于请云服务供应商来构建自己的服务，甚至直接将自身服务交给云供应商。反过来，云供应商也要开发更好的云平台给企业使用。</p></blockquote><h1 id=\"一些其他的机会\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#一些其他的机会\" title=\"一些其他的机会\"></a>一些其他的机会</h1><h2 id=\"云与AI\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#云与AI\" title=\"云与AI\"></a>云与AI</h2><p>当服务器闲下来可以做什么？挖矿（划掉）。服务器被设计成可以不间断的运行，但很显然它并不会真的时刻运行，当它闲下来时，其算力就有大用途，比如用于机器学习。当然，对于专业的ai公司，他们也有自己的服务器集群，如何利用互联网的云服务来管理自己的集群，也成了一个不错的方向。</p><h2 id=\"云与物联网\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#云与物联网\" title=\"云与物联网\"></a>云与物联网</h2><p>专业的物联网后端早就有了，尤其是近年来通信行业的进步，更加促进了“计算不一定非要在本地完成”这种概念的推广。对于传统控制行业来说，大多数计算会在嵌入式设备（看作是一个低性能的计算机）上完成，底层工程师们不得不想尽办法优化性能，确保其服务能稳定的运行在嵌入式设备中。而现在，这些计算有望在很远的云服务器上完成。（当然，嵌入式设备工程师并不会消失）</p><p>这就是我对这个行业的一些了解。</p>",
            "tags": [
                {
                    "term": "operation",
                    "scheme": "https://kawhicurry.github.io/categories/operation/",
                    "label": null
                },
                {
                    "term": "git",
                    "scheme": "https://kawhicurry.github.io/tags/git/",
                    "label": null
                }
            ]
        },
        {
            "title": "log-a-git-error",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "log-a-git-error"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/tool/log-a-git-error/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/tool/log-a-git-error/",
            "id": "https://kawhicurry.github.io/tool/log-a-git-error/",
            "guidislink": false,
            "published": "2021-11-10T12:01:01.000Z",
            "published_parsed": [
                2021,
                11,
                10,
                12,
                1,
                1,
                2,
                314,
                0
            ],
            "updated": "2021-11-10T12:11:45.333Z",
            "updated_parsed": [
                2021,
                11,
                10,
                12,
                11,
                45,
                2,
                314,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; git <span class=\"built_in\">clone</span> https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"string\">&#x27;ansible&#x27;</span>...</span><br /><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://git.qingyou.ren/KawhiCurry/ansible.git/&#x27;</span>: Failed to connect to 127.0.0.1 port 7890: Connection refused</span><br /></pre></td></tr></table></figure><p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p><p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p><p>record the operation here.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -l</span><br /><span class=\"line\">git config --global -e</span><br /><span class=\"line\">//delete or comment on the lines about port</span><br /></pre></td></tr></table></figure>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gu"
                }
            ],
            "summary": "<p>When I tried to clone a repo from self-built gitlab. I met a error like this：</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$&gt; git <span class=\"built_in\">clone</span> https://git.qingyou.ren/KawhiCurry/ansible.git  Cloning into <span class=\"string\">&#x27;ansible&#x27;</span>...</span><br /><span class=\"line\">fatal: unable to access <span class=\"string\">&#x27;https://git.qingyou.ren/KawhiCurry/ansible.git/&#x27;</span>: Failed to connect to 127.0.0.1 port 7890: Connection refused</span><br /></pre></td></tr></table></figure><p>Anyway, 7890 refuse me. Finally, I got this: <a href=\"https://www.cnblogs.com/lfri/p/15377383.html\">cnblogs</a></p><p>Seems my proxy(or vpn?)ruin it. It leads my git somewhere strange.</p><p>record the operation here.</p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global -l</span><br /><span class=\"line\">git config --global -e</span><br /><span class=\"line\">//delete or comment on the lines about port</span><br /></pre></td></tr></table></figure>",
            "tags": [
                {
                    "term": "tool",
                    "scheme": "https://kawhicurry.github.io/categories/tool/",
                    "label": null
                },
                {
                    "term": "git",
                    "scheme": "https://kawhicurry.github.io/tags/git/",
                    "label": null
                }
            ]
        },
        {
            "title": "Magic-Macro",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "Magic-Macro"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/language/magic-macro/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/language/magic-macro/",
            "id": "https://kawhicurry.github.io/language/magic-macro/",
            "guidislink": false,
            "published": "2021-11-07T12:28:58.000Z",
            "published_parsed": [
                2021,
                11,
                7,
                12,
                28,
                58,
                6,
                311,
                0
            ],
            "updated": "2021-11-07T13:14:28.751Z",
            "updated_parsed": [
                2021,
                11,
                7,
                13,
                14,
                28,
                6,
                311,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"The-magic-of-macro\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#The-magic-of-macro\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"># The magic of macro</span><br /><span class=\"line\"></span><br /><span class=\"line\">最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：</span><br /><span class=\"line\"></span><br /><span class=\"line\">```c</span><br /><span class=\"line\">static const char* PARA_LIST[MAX_ARG_NUM] = &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;</span><br /><span class=\"line\">//然后对&#x27;=&#x27;前的值与上述值匹配，得到一个id，如name的id为0</span><br /><span class=\"line\">switch(i)&#123;</span><br /><span class=\"line\">    case 0:</span><br /><span class=\"line\">      if (para_len &gt; MAX_NAME_LEN) &#123;</span><br /><span class=\"line\">        printf(&quot;name too long!&quot;);</span><br /><span class=\"line\">        return;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);</span><br /><span class=\"line\">      break;</span><br /><span class=\"line\">    case 1:</span><br /><span class=\"line\">      //...</span><br /><span class=\"line\">    case 4:</span><br /><span class=\"line\">      //...  </span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值</span><br /></pre></td></tr></table></figure><p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(the_mirror, element, parameter)            \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#123;                                                           \\</span></span><br /><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                       \\</span></span><br /><span class=\"line\"><span class=\"meta\">      the_mirror.timeout_len = strlen(parameter);             \\</span></span><br /><span class=\"line\"><span class=\"meta\">    &#125;                                                         \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br /></pre></td></tr></table></figure><p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(p_mirror, element, parameter, id)               \\</span></span><br /><span class=\"line\"><span class=\"meta\">  do &#123;                                                             \\</span></span><br /><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (length(parameter) &gt; MAX_##element##_LEN) &#123;                 \\</span></span><br /><span class=\"line\"><span class=\"meta\">      printf(<span class=\"meta-string\">&quot;##element too long!&quot;</span>);                               \\</span></span><br /><span class=\"line\"><span class=\"meta\">      return 0;                                                    \\</span></span><br /><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br /><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                            \\</span></span><br /><span class=\"line\"><span class=\"meta\">      (p_mirror)-&gt;timeout_len = length(parameter);                 \\</span></span><br /><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memset((p_mirror)-&gt;element, <span class=\"meta-string\">&#x27;\\0&#x27;</span>, length(parameter) + 1);      \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memcpy((p_mirror)-&gt;element, parameter, length(parameter) - 1); \\</span></span><br /><span class=\"line\"><span class=\"meta\">    ((p_mirror)-&gt;available) &lt;&lt; id;                                 \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#125; while (0)</span></span><br /><span class=\"line\"></span><br /></pre></td></tr></table></figure><p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br /><span class=\"line\">  set_mirror(p_mirror, name, parameter, id);</span><br /><span class=\"line\">  <span class=\"keyword\">break</span>;<span class=\"comment\">//break还是老老实实写吧，方便set_mirror复用</span></span><br /></pre></td></tr></table></figure><p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p><p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p><p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"The-magic-of-macro\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#The-magic-of-macro\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，"
                }
            ],
            "summary": "<h1 id=\"The-magic-of-macro\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#The-magic-of-macro\" title=\"The magic of macro\"></a>The magic of macro</h1><p>最近在写c，遇到了这样一段逻辑，要根据接受的字符串</p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /><span class=\"line\">15</span><br /><span class=\"line\">16</span><br /><span class=\"line\">17</span><br /><span class=\"line\">18</span><br /><span class=\"line\">19</span><br /><span class=\"line\">20</span><br /><span class=\"line\">21</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"># The magic of macro</span><br /><span class=\"line\"></span><br /><span class=\"line\">最近在写c，遇到了这样一段逻辑，根据要接受的字符串，比如`name=ubuntu`来在结构体mirror中找到对应的mirror.name进行赋值，一开始是这样设计的：</span><br /><span class=\"line\"></span><br /><span class=\"line\">```c</span><br /><span class=\"line\">static const char* PARA_LIST[MAX_ARG_NUM] = &#123;&quot;name&quot;, &quot;cmd&quot;, &quot;arg&quot;, &quot;url&quot;, &quot;timeout&quot;&#125;;</span><br /><span class=\"line\">//然后对&#x27;=&#x27;前的值与上述值匹配，得到一个id，如name的id为0</span><br /><span class=\"line\">switch(i)&#123;</span><br /><span class=\"line\">    case 0:</span><br /><span class=\"line\">      if (para_len &gt; MAX_NAME_LEN) &#123;</span><br /><span class=\"line\">        printf(&quot;name too long!&quot;);</span><br /><span class=\"line\">        return;</span><br /><span class=\"line\">      &#125;</span><br /><span class=\"line\">      memcpy(mirror-&gt;name, parameter + 1, MAX_NAME_LEN);</span><br /><span class=\"line\">      break;</span><br /><span class=\"line\">    case 1:</span><br /><span class=\"line\">      //...</span><br /><span class=\"line\">    case 4:</span><br /><span class=\"line\">      //...  </span><br /><span class=\"line\">&#125;</span><br /><span class=\"line\">//然后switch进行匹配，在switch中都需要先做长度判断，再给结构体mirror赋值</span><br /></pre></td></tr></table></figure><p>对于每个case来说，这样的事情都要做一遍，而其中除了struct中的元素不同之外，其他基本都完全一致（除了最后一个timeout），于是我就想简化这个过程。一开始，我想到了写n个不同的函数，这样我就可以在每个case中用一个函数替换，但仔细一想，这样还不是要给每个case写一个函数。这时候我想起了宏，上网查找一番后发现的宏的拼接功能。于是我写出了这个：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(the_mirror, element, parameter)            \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#123;                                                           \\</span></span><br /><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                       \\</span></span><br /><span class=\"line\"><span class=\"meta\">      the_mirror.timeout_len = strlen(parameter);             \\</span></span><br /><span class=\"line\"><span class=\"meta\">    &#125;                                                         \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memset(the_mirror.element, 0, strlen(parameter) + 1);     \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memcpy(the_mirror.element, parameter, sizeof(parameter)); \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#125;</span></span><br /></pre></td></tr></table></figure><p>其中的<code>#element</code>,会讲element替换成字符串，而<code>##</code>可以将set_mirror的参数和后面的内容进行拼接（在后面的版本有示范）。上面这个版本已经可以替换赋值的功能了，但还没对长度进行考察。然后我脑子一抽，写了个<code>#define len_set_mirror</code> 其实就是上面<code>set_mirror</code>加一个参数，然后再调用<code>set_mirror</code>的宏。当时是记住了宏的一种“延迟”的机制，可以在有限次数内对宏进行一个嵌套。后面发现length可以直接从parameter获取，于是就将两个宏合并成了一个：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /><span class=\"line\">4</span><br /><span class=\"line\">5</span><br /><span class=\"line\">6</span><br /><span class=\"line\">7</span><br /><span class=\"line\">8</span><br /><span class=\"line\">9</span><br /><span class=\"line\">10</span><br /><span class=\"line\">11</span><br /><span class=\"line\">12</span><br /><span class=\"line\">13</span><br /><span class=\"line\">14</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> set_mirror(p_mirror, element, parameter, id)               \\</span></span><br /><span class=\"line\"><span class=\"meta\">  do &#123;                                                             \\</span></span><br /><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (length(parameter) &gt; MAX_##element##_LEN) &#123;                 \\</span></span><br /><span class=\"line\"><span class=\"meta\">      printf(<span class=\"meta-string\">&quot;##element too long!&quot;</span>);                               \\</span></span><br /><span class=\"line\"><span class=\"meta\">      return 0;                                                    \\</span></span><br /><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br /><span class=\"line\"><span class=\"meta\">    <span class=\"meta-keyword\">if</span> (!strcmp(#element, <span class=\"meta-string\">&quot;timeout&quot;</span>)) &#123;                            \\</span></span><br /><span class=\"line\"><span class=\"meta\">      (p_mirror)-&gt;timeout_len = length(parameter);                 \\</span></span><br /><span class=\"line\"><span class=\"meta\">    &#125;                                                              \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memset((p_mirror)-&gt;element, <span class=\"meta-string\">&#x27;\\0&#x27;</span>, length(parameter) + 1);      \\</span></span><br /><span class=\"line\"><span class=\"meta\">    memcpy((p_mirror)-&gt;element, parameter, length(parameter) - 1); \\</span></span><br /><span class=\"line\"><span class=\"meta\">    ((p_mirror)-&gt;available) &lt;&lt; id;                                 \\</span></span><br /><span class=\"line\"><span class=\"meta\">  &#125; while (0)</span></span><br /><span class=\"line\"></span><br /></pre></td></tr></table></figure><p>这次成功将所有功能合并了，并且学到了用do…while(0)来提高宏的安全性（其实我也想到了用大括号的方法来避免，但确实do…while(0)是一个更好的方案。这种写法之后我只需在case中写两行：</p><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /><span class=\"line\">2</span><br /><span class=\"line\">3</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br /><span class=\"line\">  set_mirror(p_mirror, name, parameter, id);</span><br /><span class=\"line\">  <span class=\"keyword\">break</span>;<span class=\"comment\">//break还是老老实实写吧，方便set_mirror复用</span></span><br /></pre></td></tr></table></figure><p>其实在第一个宏之前，我还写了个在宏中构造变量来接受值的做法，但我发现完全没有必要，毕竟传递进来的值都应该可以被直接操作的（宏展开后直接获得变量）。由此也引出一条经验，大可不必在宏中定义新变量来处理数据。</p><p>我对宏最大的印象就是文本替换，关于上面这段逻辑，switch还可以进一步优化。而对于整个c来说，宏是底层库的基础，我后面试图去实现一个strlen函数时，发现这玩意就是靠宏和汇编来实现的，而像c中的attribute，<strong>VA_ARGS</strong>(可变参数)，更有一片天地。甚至可以做逻辑运算，过于离谱了。</p><p>结论：宏是魔法，这是我第一次真正近距离接触它，它真的是c的魔法。</p>",
            "tags": [
                {
                    "term": "Language",
                    "scheme": "https://kawhicurry.github.io/categories/Language/",
                    "label": null
                },
                {
                    "term": "C",
                    "scheme": "https://kawhicurry.github.io/tags/C/",
                    "label": null
                }
            ]
        },
        {
            "title": "Daily-10-27",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "Daily-10-27"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/uncategorized/daily-10-27/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/uncategorized/daily-10-27/",
            "id": "https://kawhicurry.github.io/uncategorized/daily-10-27/",
            "guidislink": false,
            "published": "2021-10-27T10:57:04.000Z",
            "published_parsed": [
                2021,
                10,
                27,
                10,
                57,
                4,
                2,
                300,
                0
            ],
            "updated": "2021-10-27T11:50:25.587Z",
            "updated_parsed": [
                2021,
                10,
                27,
                11,
                50,
                25,
                2,
                300,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"Daily-10-27\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Daily-10-27\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p><p>今天早上才写了<a href=\"https://kawhicurry.github.io/life/qingyou-1/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p><ol><li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li><li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li><li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li></ol><p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p><p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p><p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p><p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p><p>以上。</p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"Daily-10-27\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Daily-10-27\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天"
                }
            ],
            "summary": "<h1 id=\"Daily-10-27\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Daily-10-27\" title=\"Daily-10-27\"></a>Daily-10-27</h1><p>谁都想不到第一次挑战会来的这么快，前两天还在悠哉游哉的看镜像站，今天就遇到了空前绝后大危机。学校的服务器似乎遇上了arp广播风暴，信息办和青柚几乎所有的服务都down了。两位后端学长带着我去了信息办，用了一下午来试着恢复所有service，顺便还参观了一下信息办的机房。</p><p>今天早上才写了<a href=\"https://kawhicurry.github.io/life/qingyou-1/\" title=\"Qingyou_1\">Qingyou_1</a>这篇文章，说到同时加班我摸鱼。这个摸鱼确实没得办法，毕竟是业务处理方面的事情，但今天这个服务器down了，可就是彻彻底底要运维干活了（然后我还是在摸鱼）。早上本来在开开心心的在github上搭自己的blog，本来很开心的发现hexo的源代码和deploy用的现成文件可以直接用<code>git branch</code>分开来。结果到了中午，突然说学校的内部网络出了超级大问题，连食堂都刷不上卡。中午两位后端学长都到了，然后带着我去了信息办，坐在某个开会的桌子边重启服务。主要是两位学长在做，我最多起一个记录的作用。下面是一些印象深刻的记录。</p><ol><li>最主要的两台服务器，理论是完全一样的，但一台可以正常运行，另一台卡死，reboot都卡死。并且tomcat父进程为1，无法kill，同时其log文件夹无法打开，无法ls、du，free显示内存占满，swap分区16g全满。最后只能物理重启，重启后可以正常使用了，从另一台服务器上copy过来了配置。</li><li>搭载某部门服务的服务器，80+443端口都无法使用，但ssh连接正常，redis没有设置登录密码，但是手动登录时要求密码了，reboot之后可以正常使用了，但是证书似乎还有问题，两个学长也没解决。</li><li>搭载另一部门服务的服务器，服务down了，重启服务后可正常使用。</li></ol><p>除此之外还有各种容器需要重启，有的是学长搭建的，如果不及时记录的话，还真不一定记得住他们的作用。</p><p>本来下午约了去飞无人机，果断推到明天了，不过无人机的代码倒是早就写好了。本以为明天没课的，约时间调试无人机的时候才想起来明天还有个实验课。又是不想上课的一天。</p><p>不管怎么说，今天下午还是多多少少学到了点nouns，也深刻意识到一个了解服务的运维的重要性，此前的服务都是后端同学手动搭的，幸好他们还记得相关信息，不然我现在的能力可做不到完美恢复。除此之外，我对网络、数据库的了解还是差的太多。</p><p>对于未来的话，希望能早点上云吧，服务也希望能够系统化一点，文档可以多写一点。</p><p>以上。</p>",
            "tags": [
                {
                    "term": "Daily",
                    "scheme": "https://kawhicurry.github.io/tags/Daily/",
                    "label": null
                }
            ]
        },
        {
            "title": "Qingyou_1",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "Qingyou_1"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/life/qingyou-1/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/life/qingyou-1/",
            "id": "https://kawhicurry.github.io/life/qingyou-1/",
            "guidislink": false,
            "published": "2021-10-27T01:01:06.000Z",
            "published_parsed": [
                2021,
                10,
                27,
                1,
                1,
                6,
                2,
                300,
                0
            ],
            "updated": "2021-10-27T05:13:00.307Z",
            "updated_parsed": [
                2021,
                10,
                27,
                5,
                13,
                0,
                2,
                300,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"青柚的这点事（1）\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#青柚的这点事（1）\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p><ol><li>学校的小程序是青柚管的</li><li>不招零基础</li></ol><p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p><p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p><p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p><p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p><p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p><p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p><p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"青柚的这点事（1）\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#青柚的这点事（1）\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两"
                }
            ],
            "summary": "<h1 id=\"青柚的这点事（1）\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#青柚的这点事（1）\" title=\"青柚的这点事（1）\"></a>青柚的这点事（1）</h1><p>大一开学的时候被学校拉去听优秀学生讲座。然后青柚的指导老师上去宣传了一波，我就记得两件事：</p><ol><li>学校的小程序是青柚管的</li><li>不招零基础</li></ol><p>说是不招，还是抱着试一试的心态，去投了个ui岗，毕竟当时恰好在学原型。结果石沉大海，冒得回应。</p><p>大一上死命学会c之后，大一下堕落了起来，直到有天看到阿里云服务器打折，心血来潮，和好基友Roc买了一台49一年的小服务器，搭博客玩。</p><p>没服务器的时候就在折腾jekyll和各种pages了，有了服务器之后终于上了心心念的wordpress，然后就是折腾wp各种奇奇怪怪的东西，然后发现有个好东西叫docker，于是又拿docker部署各种各样的服务。我记得最多的时候，部署了博客，gitee，一个ftp服务器，还连了163邮箱发报警。对于一个1核心2m带宽的服务器来说，压力还是很大了哈哈哈。对了，一开始是用宝塔面板，开始还觉得挺方便的，后来lnmp的p就开始出各种各样的问题。这时候就发现了自动部署忽视细节是个多么难搞的问题。从此决定手动搭各种环境。然后又经历了几次服务器重置之后，我和Roc决定还是把网页部署到gitlab page上，毕竟写好md文档然后直接push，确实比wp舒服多了。</p><p>接下来在大一结束的那个暑假，我又一次想起了青柚的招新，这次我决定报个运维岗位试试。本想着会遇到各种可能的高难度问题，还提心吊胆地做了各种准备，结果似乎没有遇到太大困难就进来了。进来之后才发现青柚已经很久没有运维了。上一届的运维是一位后端，再往前是一位运营。也确实，运维这份活在小公司本就是可有可无的，更何况这么个工作室呢？不过我还是很喜欢这份活的，毕竟能看着各种软件稳稳的运行，不用想破脑袋实现各种奇奇怪怪的需求，其实也不错（手动狗头）。</p><p>就在今天，学校的出入校小程序上线了。这个项目一个月前就开始了，当时我也被拉进了这个项目的群里，然后被告知学校找了外面的运维，用了大公司的serverless。这一个月以来都是平稳推进，直到前天，突然改了需求，又要求昨天就要上线，整个工作室的人都被拉了进来，并且核心人员从前天晚上七点一直加班到昨天中午十一二点。当所有人都在加班的时候，一个运维坐在工作室的正中间，写着自己满是bug的minishell（狗头）。</p><p>好吧，其实几天前我几天前刚接到了要管理学校镜像站的任务，一个python+nginx的小组合，拉取镜像用了python写的mirrord工具，好像是北京外国语还是北京交大的（我估计再往上查一下会发现是清华的，此时，清华用的go），然后再在nginx里面配置下转发就行。但是仔细考虑下自己吧，好像python不咋熟练（那必然），go吧肯定不会，最要命的是线程相关的问题，基本是只知道概念（甚至不清楚），略知一二那种。所以想写出点什么，一时半会恐怕没办法，所以现在抓紧学操作系统，把线程方面搞清楚了，再找个趁手的工具，把镜像站的任务系统化一点，争取做成一个平台。</p><p>我又想起前天晚上加班的场景，虽然我啥都没干，但我还是挺喜欢这种氛围的。希望能在这里写点什么，写点什么，最后再写点什么。（老谜语人了）</p>",
            "tags": [
                {
                    "term": "life",
                    "scheme": "https://kawhicurry.github.io/categories/life/",
                    "label": null
                }
            ]
        },
        {
            "title": "New-Start",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "New-Start"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/uncategorized/new-start/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/uncategorized/new-start/",
            "id": "https://kawhicurry.github.io/uncategorized/new-start/",
            "guidislink": false,
            "published": "2021-10-25T09:45:59.000Z",
            "published_parsed": [
                2021,
                10,
                25,
                9,
                45,
                59,
                0,
                298,
                0
            ],
            "updated": "2021-10-27T05:11:31.990Z",
            "updated_parsed": [
                2021,
                10,
                27,
                5,
                11,
                31,
                2,
                300,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"New-Start\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#New-Start\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"https://kawhicurry.github.io/kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p><p>I hope I can keep the anything I meet after now.</p><p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<h1 id=\"New-Start\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#New-Start\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a h"
                }
            ],
            "summary": "<h1 id=\"New-Start\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#New-Start\" title=\"New Start\"></a>New Start</h1><p>Today I start a new blog with domain: <a href=\"https://kawhicurry.github.io/kawhicurry.shuihua.top\">kawhicurry.shuihua.top</a>.</p><p>I hope I can keep the anything I meet after now.</p><p>Record the things that refresh, happy, knowledgeable or miserable, sad, terrible.</p>"
        },
        {
            "title": "Hello World",
            "title_detail": {
                "type": "text/plain",
                "language": null,
                "base": "https://kawhicurry.github.io/atom.xml",
                "value": "Hello World"
            },
            "links": [
                {
                    "href": "https://kawhicurry.github.io/uncategorized/hello-world/",
                    "rel": "alternate",
                    "type": "text/html"
                }
            ],
            "link": "https://kawhicurry.github.io/uncategorized/hello-world/",
            "id": "https://kawhicurry.github.io/uncategorized/hello-world/",
            "guidislink": false,
            "published": "2021-10-25T01:01:06.000Z",
            "published_parsed": [
                2021,
                10,
                25,
                1,
                1,
                6,
                0,
                298,
                0
            ],
            "updated": "2021-10-27T12:14:15.419Z",
            "updated_parsed": [
                2021,
                10,
                27,
                12,
                14,
                15,
                2,
                300,
                0
            ],
            "content": [
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p><h2 id=\"Quick-Start\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Quick-Start\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Create-a-new-post\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p><h3 id=\"Run-server\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Run-server\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p><h3 id=\"Generate-static-files\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Generate-static-files\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p><h3 id=\"Deploy-to-remote-sites\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Deploy-to-remote-sites\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"
                },
                {
                    "type": "text/html",
                    "language": null,
                    "base": "https://kawhicurry.github.io/atom.xml",
                    "value": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for"
                }
            ],
            "summary": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p><h2 id=\"Quick-Start\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Quick-Start\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Create-a-new-post\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p><h3 id=\"Run-server\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Run-server\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p><h3 id=\"Generate-static-files\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Generate-static-files\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p><h3 id=\"Deploy-to-remote-sites\"><a class=\"headerlink\" href=\"https://kawhicurry.github.io/atom.xml#Deploy-to-remote-sites\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br /></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br /></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"
        }
    ],
    "feed": {
        "title": "Kawhicurry's Blog",
        "title_detail": {
            "type": "text/plain",
            "language": null,
            "base": "https://kawhicurry.github.io/atom.xml",
            "value": "Kawhicurry's Blog"
        },
        "subtitle": "Welcome to Kawhicurry's Blog",
        "subtitle_detail": {
            "type": "text/plain",
            "language": null,
            "base": "https://kawhicurry.github.io/atom.xml",
            "value": "Welcome to Kawhicurry's Blog"
        },
        "links": [
            {
                "href": "https://kawhicurry.github.io/atom.xml",
                "rel": "self",
                "type": "application/atom+xml"
            },
            {
                "href": "https://kawhicurry.github.io/",
                "rel": "alternate",
                "type": "text/html"
            }
        ],
        "link": "https://kawhicurry.github.io/",
        "updated": "2021-12-19T12:05:36.345Z",
        "updated_parsed": [
            2021,
            12,
            19,
            12,
            5,
            36,
            6,
            353,
            0
        ],
        "id": "https://kawhicurry.github.io/",
        "guidislink": false,
        "authors": [
            {
                "name": "kawhicurry"
            }
        ],
        "author_detail": {
            "name": "kawhicurry"
        },
        "author": "kawhicurry",
        "generator_detail": {
            "href": "https://hexo.io/",
            "name": "Hexo"
        },
        "generator": "Hexo"
    },
    "headers": {
        "connection": "close",
        "content-length": "42178",
        "server": "GitHub.com",
        "content-type": "application/xml",
        "permissions-policy": "interest-cohort=()",
        "last-modified": "Mon, 20 Dec 2021 05:27:37 GMT",
        "access-control-allow-origin": "*",
        "strict-transport-security": "max-age=31556952",
        "etag": "W/\"61c01449-3438d\"",
        "expires": "Mon, 20 Dec 2021 06:17:28 GMT",
        "cache-control": "max-age=600",
        "content-encoding": "gzip",
        "x-proxy-cache": "MISS",
        "x-github-request-id": "0B8E:5659:80E177:88F6A9:61C01DA0",
        "accept-ranges": "bytes",
        "date": "Mon, 20 Dec 2021 06:28:37 GMT",
        "via": "1.1 varnish",
        "age": "0",
        "x-served-by": "cache-nrt18341-NRT",
        "x-cache": "HIT",
        "x-cache-hits": "1",
        "x-timer": "S1639981717.968703,VS0,VE152",
        "vary": "Accept-Encoding",
        "x-fastly-request-id": "f7fe7972f828abfaf9c63ad0768d793fb0bde56c"
    },
    "etag": "W/\"61c01449-3438d\"",
    "updated": "Mon, 20 Dec 2021 05:27:37 GMT",
    "updated_parsed": [
        2021,
        12,
        20,
        5,
        27,
        37,
        0,
        354,
        0
    ],
    "href": "https://kawhicurry.github.io/atom.xml",
    "status": 200,
    "encoding": "utf-8",
    "version": "atom10",
    "namespaces": {
        "": "http://www.w3.org/2005/Atom"
    }
}